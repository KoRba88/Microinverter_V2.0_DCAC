
Microinverter_V2.0_DCAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008664  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800884c  0800884c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800884c  0800884c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800884c  0800884c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800884c  0800884c  0001884c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000014  08008868  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08008868  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001784f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da0  00000000  00000000  00037893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002281f  00000000  00000000  0003cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016050  00000000  00000000  0005f79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7bbc  00000000  00000000  000757ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d3ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c44  00000000  00000000  0015d400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008824 	.word	0x08008824

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08008824 	.word	0x08008824

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f023 0210 	bic.w	r2, r3, #16
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	605a      	str	r2, [r3, #4]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f023 0208 	bic.w	r2, r3, #8
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	605a      	str	r2, [r3, #4]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000878:	4907      	ldr	r1, [pc, #28]	; (8000898 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4313      	orrs	r3, r2
 800087e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4013      	ands	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40021000 	.word	0x40021000
 80008fc:	00000000 	.word	0x00000000

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f001 faaf 	bl	8001e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f9b8 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f000 fe66 	bl	80015dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000910:	f000 fe52 	bl	80015b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000914:	f000 f9fe 	bl	8000d14 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000918:	f000 fabc 	bl	8000e94 <MX_ADC2_Init>
  MX_COMP1_Init();
 800091c:	f000 fb58 	bl	8000fd0 <MX_COMP1_Init>
  MX_COMP3_Init();
 8000920:	f000 fb7c 	bl	800101c <MX_COMP3_Init>
  MX_COMP4_Init();
 8000924:	f000 fba0 	bl	8001068 <MX_COMP4_Init>
  MX_DAC3_Init();
 8000928:	f000 fbc4 	bl	80010b4 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 800092c:	f000 fc06 	bl	800113c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000930:	f000 fc2c 	bl	800118c <MX_OPAMP2_Init>
  MX_SPI3_Init();
 8000934:	f000 fc50 	bl	80011d8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000938:	f000 fcc6 	bl	80012c8 <MX_TIM1_Init>
  MX_TIM16_Init();
 800093c:	f000 fe16 	bl	800156c <MX_TIM16_Init>
  MX_TIM2_Init();
 8000940:	f000 fdc6 	bl	80014d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 8000944:	48ac      	ldr	r0, [pc, #688]	; (8000bf8 <main+0x2f8>)
 8000946:	f004 ff39 	bl	80057bc <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp2);
 800094a:	48ac      	ldr	r0, [pc, #688]	; (8000bfc <main+0x2fc>)
 800094c:	f004 ff36 	bl	80057bc <HAL_OPAMP_Start>


  //DAC3 CHANNEL 1 - COMP1 & COMP3 input  (MOSFET SHOOT THROUGH OVERCURRENT) //
  DAC3 ->DHR12R1 = (uint32_t)(OVERCURRENT_MOS); //DAC3 CHANNEL 1 SET VALUE
 8000950:	4bab      	ldr	r3, [pc, #684]	; (8000c00 <main+0x300>)
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	4bab      	ldr	r3, [pc, #684]	; (8000c04 <main+0x304>)
 8000956:	609a      	str	r2, [r3, #8]
  DAC3->CR |= DAC_CR_EN1; //ENABLE DAC1 CHANNEL 1
 8000958:	4baa      	ldr	r3, [pc, #680]	; (8000c04 <main+0x304>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4aa9      	ldr	r2, [pc, #676]	; (8000c04 <main+0x304>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6013      	str	r3, [r2, #0]
  while(!(DAC3->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC3 IS READY
 8000964:	bf00      	nop
 8000966:	4ba7      	ldr	r3, [pc, #668]	; (8000c04 <main+0x304>)
 8000968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f9      	beq.n	8000966 <main+0x66>
  DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000972:	4ba4      	ldr	r3, [pc, #656]	; (8000c04 <main+0x304>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4aa3      	ldr	r2, [pc, #652]	; (8000c04 <main+0x304>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6053      	str	r3, [r2, #4]

  //DAC3 CHANNEL 2 - COMP4 input (HVDC BUS OVERCURRENT)
  DAC3 ->DHR12R2 = (uint32_t)(OVERCURRENT_BUS); //DAC3 CHANNEL 2 SET VALUE // 70% max val
 800097e:	4ba2      	ldr	r3, [pc, #648]	; (8000c08 <main+0x308>)
 8000980:	881a      	ldrh	r2, [r3, #0]
 8000982:	4ba0      	ldr	r3, [pc, #640]	; (8000c04 <main+0x304>)
 8000984:	615a      	str	r2, [r3, #20]
  DAC3->CR |= DAC_CR_EN2; //ENABLE DAC3 CHANNEL 2
 8000986:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <main+0x304>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a9e      	ldr	r2, [pc, #632]	; (8000c04 <main+0x304>)
 800098c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000990:	6013      	str	r3, [r2, #0]
  while(!(DAC3->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC3 CHANNEL 2 IS READY
 8000992:	bf00      	nop
 8000994:	4b9b      	ldr	r3, [pc, #620]	; (8000c04 <main+0x304>)
 8000996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d0f9      	beq.n	8000994 <main+0x94>
  DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 80009a0:	4b98      	ldr	r3, [pc, #608]	; (8000c04 <main+0x304>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	4a97      	ldr	r2, [pc, #604]	; (8000c04 <main+0x304>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	6053      	str	r3, [r2, #4]


  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC12_BUFFER, ADC_BUFFER_SIZE);

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80009ac:	217f      	movs	r1, #127	; 0x7f
 80009ae:	4897      	ldr	r0, [pc, #604]	; (8000c0c <main+0x30c>)
 80009b0:	f002 fde2 	bl	8003578 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80009b4:	217f      	movs	r1, #127	; 0x7f
 80009b6:	4896      	ldr	r0, [pc, #600]	; (8000c10 <main+0x310>)
 80009b8:	f002 fdde 	bl	8003578 <HAL_ADCEx_Calibration_Start>

  //HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // HF HIGH SIDE AND NEG VOL MOGSFET CHARGE PUMPS

  //HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1); // LF HIGH SIDE MOSFET CHARGE PUMP

   ptr_aqusitionDMA1_1 = &aqusitionDMA1_1;
 80009bc:	4b95      	ldr	r3, [pc, #596]	; (8000c14 <main+0x314>)
 80009be:	4a96      	ldr	r2, [pc, #600]	; (8000c18 <main+0x318>)
 80009c0:	601a      	str	r2, [r3, #0]

   ptr_SPI_TxBuffer = &SPI_TxBuffer[0];
 80009c2:	4b96      	ldr	r3, [pc, #600]	; (8000c1c <main+0x31c>)
 80009c4:	4a96      	ldr	r2, [pc, #600]	; (8000c20 <main+0x320>)
 80009c6:	601a      	str	r2, [r3, #0]
   ptr_SPI_RxBuffer = &SPI_RxBuffer[0];
 80009c8:	4b96      	ldr	r3, [pc, #600]	; (8000c24 <main+0x324>)
 80009ca:	4a97      	ldr	r2, [pc, #604]	; (8000c28 <main+0x328>)
 80009cc:	601a      	str	r2, [r3, #0]
*/
   //HAL_GPIO_WritePin(OC_OUT_BOTT_GPIO_Port, OC_OUT_BOTT_Pin, RESET);



   HAL_COMP_Start(&hcomp1);
 80009ce:	4897      	ldr	r0, [pc, #604]	; (8000c2c <main+0x32c>)
 80009d0:	f003 ff8a 	bl	80048e8 <HAL_COMP_Start>
   HAL_COMP_Start(&hcomp3);
 80009d4:	4896      	ldr	r0, [pc, #600]	; (8000c30 <main+0x330>)
 80009d6:	f003 ff87 	bl	80048e8 <HAL_COMP_Start>
   HAL_COMP_Start(&hcomp4);
 80009da:	4896      	ldr	r0, [pc, #600]	; (8000c34 <main+0x334>)
 80009dc:	f003 ff84 	bl	80048e8 <HAL_COMP_Start>

   //HAL_Delay(10);

   //TIM1->CR1|=(TIM_CR1_CEN);

   if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)ADC12_BUFFER, ADC_BUFFER_SIZE) != HAL_OK)
 80009e0:	2201      	movs	r2, #1
 80009e2:	4995      	ldr	r1, [pc, #596]	; (8000c38 <main+0x338>)
 80009e4:	4889      	ldr	r0, [pc, #548]	; (8000c0c <main+0x30c>)
 80009e6:	f002 ff9d 	bl	8003924 <HAL_ADCEx_MultiModeStart_DMA>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <main+0xf4>
   {
     Error_Handler();
 80009f0:	f000 fedc 	bl	80017ac <Error_Handler>
   }
   // Enable the SPI3 peripheral.
   SPI3->CR1 |=  ( SPI_CR1_SPE );
 80009f4:	4b91      	ldr	r3, [pc, #580]	; (8000c3c <main+0x33c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a90      	ldr	r2, [pc, #576]	; (8000c3c <main+0x33c>)
 80009fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fe:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if ((*ptr_aqusitionDMA1_1) == 1)
 8000a00:	4b84      	ldr	r3, [pc, #528]	; (8000c14 <main+0x314>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d1fa      	bne.n	8000a00 <main+0x100>
	  {

		  if(OC_PROT_ON == 0)
 8000a0a:	4b8d      	ldr	r3, [pc, #564]	; (8000c40 <main+0x340>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10a      	bne.n	8000a28 <main+0x128>
		  {
			   HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); // Overcurrent Out To Two Level MOSFET Driver (Low default)
 8000a12:	2104      	movs	r1, #4
 8000a14:	488b      	ldr	r0, [pc, #556]	; (8000c44 <main+0x344>)
 8000a16:	f005 ff67 	bl	80068e8 <HAL_TIM_PWM_Start_IT>
			   HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2); // Second stage overcurrent and Boost/LDO Enable (High default)
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4889      	ldr	r0, [pc, #548]	; (8000c44 <main+0x344>)
 8000a1e:	f007 f911 	bl	8007c44 <HAL_TIMEx_PWMN_Start_IT>
		          //TIM1->CCER |= (uint32_t)(TIM_CCxN_ENABLE << (TIM_CHANNEL_2 & 0x1FU)); /* 0x1FU = 31 bits max shift */
		          //TIM1->BDTR |= TIM_BDTR_MOE; //ENABLE ALL OUTPUTS

			   //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); // Overcurrent Out To Two Level MOSFET Driver (Low default)
			   //HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2); // Second stage overcurrent and Boost/LDO Enable (High default)
			   OC_PROT_ON = 1;
 8000a22:	4b87      	ldr	r3, [pc, #540]	; (8000c40 <main+0x340>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
		  }

		  	HAL_GPIO_TogglePin(TOP_HF_CHP_TIM16_CH1_GPIO_Port, TOP_HF_CHP_TIM16_CH1_Pin);
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	4886      	ldr	r0, [pc, #536]	; (8000c48 <main+0x348>)
 8000a2e:	f004 fddb 	bl	80055e8 <HAL_GPIO_TogglePin>
			if (frequency_factor == 1) // divide transmit PWM Frequency by 2 - So 50 kHz / 2  = 25 kHz up to day
 8000a32:	4b86      	ldr	r3, [pc, #536]	; (8000c4c <main+0x34c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d154      	bne.n	8000ae4 <main+0x1e4>
			{
			  HAL_GPIO_WritePin(OV_OUT_BOTT_GPIO_Port, OV_OUT_BOTT_Pin, SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	4882      	ldr	r0, [pc, #520]	; (8000c48 <main+0x348>)
 8000a40:	f004 fdba 	bl	80055b8 <HAL_GPIO_WritePin>
			  I_HVDC_ADC_VAL = GetMSB(ADC12_BUFFER[0])*VREF/ADC_CODE;
 8000a44:	4b7c      	ldr	r3, [pc, #496]	; (8000c38 <main+0x338>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fe65 	bl	8001718 <GetMSB>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	f640 43da 	movw	r3, #3290	; 0xcda
 8000a56:	fb03 f302 	mul.w	r3, r3, r2
 8000a5a:	4a7d      	ldr	r2, [pc, #500]	; (8000c50 <main+0x350>)
 8000a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a60:	441a      	add	r2, r3
 8000a62:	12d2      	asrs	r2, r2, #11
 8000a64:	17db      	asrs	r3, r3, #31
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b7a      	ldr	r3, [pc, #488]	; (8000c54 <main+0x354>)
 8000a6c:	801a      	strh	r2, [r3, #0]
			  V_HVDC_ADC_VAL = GetLSB(ADC12_BUFFER[0])*VREF/ADC_CODE;
 8000a6e:	4b72      	ldr	r3, [pc, #456]	; (8000c38 <main+0x338>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fe44 	bl	8001700 <GetLSB>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f640 43da 	movw	r3, #3290	; 0xcda
 8000a80:	fb03 f302 	mul.w	r3, r3, r2
 8000a84:	4a72      	ldr	r2, [pc, #456]	; (8000c50 <main+0x350>)
 8000a86:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	12d2      	asrs	r2, r2, #11
 8000a8e:	17db      	asrs	r3, r3, #31
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b70      	ldr	r3, [pc, #448]	; (8000c58 <main+0x358>)
 8000a96:	801a      	strh	r2, [r3, #0]

			  //SPIx_Transfer(SPI3,I_HVDC_ADC_VAL,SPI_RxBuffer[0]);
			  //SPIx_Transfer(SPI3,I_HVDC_ADC_VAL,SPI_RxBuffer[0]);
			  //SPIx_Transfer(SPI3,I_HVDC_ADC_VAL,SPI_RxBuffer[0]);

			  SPI_TxBuffer[0] = VIN_MON;
 8000a98:	4b70      	ldr	r3, [pc, #448]	; (8000c5c <main+0x35c>)
 8000a9a:	881a      	ldrh	r2, [r3, #0]
 8000a9c:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <main+0x320>)
 8000a9e:	801a      	strh	r2, [r3, #0]
			  SPI_TxBuffer[1] = I_HVDC_ADC_VAL;
 8000aa0:	4b6c      	ldr	r3, [pc, #432]	; (8000c54 <main+0x354>)
 8000aa2:	881a      	ldrh	r2, [r3, #0]
 8000aa4:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <main+0x320>)
 8000aa6:	805a      	strh	r2, [r3, #2]
			  SPI_TxBuffer[2] = V_HVDC_ADC_VAL;
 8000aa8:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <main+0x358>)
 8000aaa:	881a      	ldrh	r2, [r3, #0]
 8000aac:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <main+0x320>)
 8000aae:	809a      	strh	r2, [r3, #4]
			  //SPI_TxBuffer[3] = VBAT_VAL;

			  SPIx_Transfer2(SPI3,ptr_SPI_TxBuffer,ptr_SPI_RxBuffer,SPI_TX_BUFFER_SIZE);
 8000ab0:	4b5a      	ldr	r3, [pc, #360]	; (8000c1c <main+0x31c>)
 8000ab2:	6819      	ldr	r1, [r3, #0]
 8000ab4:	4b5b      	ldr	r3, [pc, #364]	; (8000c24 <main+0x324>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	2303      	movs	r3, #3
 8000aba:	4860      	ldr	r0, [pc, #384]	; (8000c3c <main+0x33c>)
 8000abc:	f000 fe39 	bl	8001732 <SPIx_Transfer2>
			  //{
			  //}
			  /* Disable DMA1 Rx Channel */
			  //LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);

			  HAL_GPIO_WritePin(OV_OUT_BOTT_GPIO_Port, OV_OUT_BOTT_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	4860      	ldr	r0, [pc, #384]	; (8000c48 <main+0x348>)
 8000ac6:	f004 fd77 	bl	80055b8 <HAL_GPIO_WritePin>

			  HAL_ADCEx_InjectedStart(&hadc2);
 8000aca:	4851      	ldr	r0, [pc, #324]	; (8000c10 <main+0x310>)
 8000acc:	f002 fdb6 	bl	800363c <HAL_ADCEx_InjectedStart>
			  HAL_ADCEx_InjectedStart(&hadc1);
 8000ad0:	484e      	ldr	r0, [pc, #312]	; (8000c0c <main+0x30c>)
 8000ad2:	f002 fdb3 	bl	800363c <HAL_ADCEx_InjectedStart>



			  frequency_factor++;
 8000ad6:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <main+0x34c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <main+0x34c>)
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e079      	b.n	8000bd8 <main+0x2d8>
			}

			else
			{
				//HAL_GPIO_WritePin(OV_OUT_BOTT_GPIO_Port, OV_OUT_BOTT_Pin, RESET);
				frequency_factor = 1;
 8000ae4:	4b59      	ldr	r3, [pc, #356]	; (8000c4c <main+0x34c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
				HAL_ADCEx_InjectedPollForConversion(&hadc2, 1);
 8000aea:	2101      	movs	r1, #1
 8000aec:	4848      	ldr	r0, [pc, #288]	; (8000c10 <main+0x310>)
 8000aee:	f002 fe55 	bl	800379c <HAL_ADCEx_InjectedPollForConversion>
				HAL_ADCEx_InjectedPollForConversion(&hadc1, 1);
 8000af2:	2101      	movs	r1, #1
 8000af4:	4845      	ldr	r0, [pc, #276]	; (8000c0c <main+0x30c>)
 8000af6:	f002 fe51 	bl	800379c <HAL_ADCEx_InjectedPollForConversion>

				INT_TEMP_VAL = __LL_ADC_CALC_TEMPERATURE(VREF,(HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1)),LL_ADC_RESOLUTION_12B);
 8000afa:	2109      	movs	r1, #9
 8000afc:	4843      	ldr	r0, [pc, #268]	; (8000c0c <main+0x30c>)
 8000afe:	f002 ffb3 	bl	8003a68 <HAL_ADCEx_InjectedGetValue>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f640 42da 	movw	r2, #3290	; 0xcda
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	4a54      	ldr	r2, [pc, #336]	; (8000c60 <main+0x360>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	099b      	lsrs	r3, r3, #6
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <main+0x364>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	2264      	movs	r2, #100	; 0x64
 8000b1e:	fb02 f203 	mul.w	r2, r2, r3
 8000b22:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <main+0x368>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <main+0x364>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	331e      	adds	r3, #30
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <main+0x36c>)
 8000b3a:	801a      	strh	r2, [r3, #0]
				VIN_MON = (HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2))*VREF/ADC_CODE*2.83;
 8000b3c:	f240 110f 	movw	r1, #271	; 0x10f
 8000b40:	4833      	ldr	r0, [pc, #204]	; (8000c10 <main+0x310>)
 8000b42:	f002 ff91 	bl	8003a68 <HAL_ADCEx_InjectedGetValue>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f640 42da 	movw	r2, #3290	; 0xcda
 8000b4c:	fb02 f203 	mul.w	r2, r2, r3
 8000b50:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <main+0x370>)
 8000b52:	fba3 1302 	umull	r1, r3, r3, r2
 8000b56:	1ad2      	subs	r2, r2, r3
 8000b58:	0852      	lsrs	r2, r2, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	0adb      	lsrs	r3, r3, #11
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fdc6 	bl	80006f0 <__aeabi_ui2d>
 8000b64:	a322      	add	r3, pc, #136	; (adr r3, 8000bf0 <main+0x2f0>)
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	f7ff fb55 	bl	8000218 <__aeabi_dmul>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f7ff fe35 	bl	80007e4 <__aeabi_d2uiz>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <main+0x35c>)
 8000b80:	801a      	strh	r2, [r3, #0]
				VBAT_VAL = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2))*VREF/ADC_CODE*3;;
 8000b82:	f240 110f 	movw	r1, #271	; 0x10f
 8000b86:	4821      	ldr	r0, [pc, #132]	; (8000c0c <main+0x30c>)
 8000b88:	f002 ff6e 	bl	8003a68 <HAL_ADCEx_InjectedGetValue>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f640 42da 	movw	r2, #3290	; 0xcda
 8000b92:	fb02 f203 	mul.w	r2, r2, r3
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <main+0x370>)
 8000b98:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9c:	1ad2      	subs	r2, r2, r3
 8000b9e:	0852      	lsrs	r2, r2, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	0adb      	lsrs	r3, r3, #11
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	0052      	lsls	r2, r2, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <main+0x374>)
 8000bb0:	801a      	strh	r2, [r3, #0]
				NTC_VAL = (HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1))*VREF/ADC_CODE;
 8000bb2:	2109      	movs	r1, #9
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <main+0x310>)
 8000bb6:	f002 ff57 	bl	8003a68 <HAL_ADCEx_InjectedGetValue>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f640 42da 	movw	r2, #3290	; 0xcda
 8000bc0:	fb02 f203 	mul.w	r2, r2, r3
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <main+0x370>)
 8000bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bca:	1ad2      	subs	r2, r2, r3
 8000bcc:	0852      	lsrs	r2, r2, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	0adb      	lsrs	r3, r3, #11
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <main+0x378>)
 8000bd6:	801a      	strh	r2, [r3, #0]

				//LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
				//LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
			}

			HAL_GPIO_TogglePin(TOP_LF_CHP_TIM16_CH1N_GPIO_Port, TOP_LF_CHP_TIM16_CH1N_Pin);
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	481b      	ldr	r0, [pc, #108]	; (8000c48 <main+0x348>)
 8000bdc:	f004 fd04 	bl	80055e8 <HAL_GPIO_TogglePin>

*/



			*ptr_aqusitionDMA1_1 = 0;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <main+0x314>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	  if ((*ptr_aqusitionDMA1_1) == 1)
 8000be8:	e70a      	b.n	8000a00 <main+0x100>
 8000bea:	bf00      	nop
 8000bec:	f3af 8000 	nop.w
 8000bf0:	0a3d70a4 	.word	0x0a3d70a4
 8000bf4:	4006a3d7 	.word	0x4006a3d7
 8000bf8:	20000140 	.word	0x20000140
 8000bfc:	20000058 	.word	0x20000058
 8000c00:	20000000 	.word	0x20000000
 8000c04:	50001000 	.word	0x50001000
 8000c08:	20000002 	.word	0x20000002
 8000c0c:	200001a0 	.word	0x200001a0
 8000c10:	200000ac 	.word	0x200000ac
 8000c14:	20000094 	.word	0x20000094
 8000c18:	20000040 	.word	0x20000040
 8000c1c:	20000328 	.word	0x20000328
 8000c20:	20000044 	.word	0x20000044
 8000c24:	20000118 	.word	0x20000118
 8000c28:	2000004c 	.word	0x2000004c
 8000c2c:	2000011c 	.word	0x2000011c
 8000c30:	200002b8 	.word	0x200002b8
 8000c34:	2000017c 	.word	0x2000017c
 8000c38:	20000030 	.word	0x20000030
 8000c3c:	40003c00 	.word	0x40003c00
 8000c40:	20000052 	.word	0x20000052
 8000c44:	2000026c 	.word	0x2000026c
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	80080081 	.word	0x80080081
 8000c54:	20000034 	.word	0x20000034
 8000c58:	20000036 	.word	0x20000036
 8000c5c:	20000038 	.word	0x20000038
 8000c60:	057619f1 	.word	0x057619f1
 8000c64:	1fff75a8 	.word	0x1fff75a8
 8000c68:	1fff75ca 	.word	0x1fff75ca
 8000c6c:	2000003e 	.word	0x2000003e
 8000c70:	00100101 	.word	0x00100101
 8000c74:	2000003a 	.word	0x2000003a
 8000c78:	2000003c 	.word	0x2000003c

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	2238      	movs	r2, #56	; 0x38
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fdc2 	bl	8008814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f004 fdbe 	bl	8005820 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cbe:	2355      	movs	r3, #85	; 0x55
 8000cc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 fe58 	bl	8005988 <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cde:	f000 fd65 	bl	80017ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f005 f95c 	bl	8005fb8 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d06:	f000 fd51 	bl	80017ac <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	; 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09a      	sub	sp, #104	; 0x68
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f007 fd70 	bl	8008814 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	223c      	movs	r2, #60	; 0x3c
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f007 fd6a 	bl	8008814 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d40:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d48:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4e:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d54:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d60:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d6c:	4b45      	ldr	r3, [pc, #276]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d78:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d88:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000da4:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dac:	4835      	ldr	r0, [pc, #212]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000dae:	f001 fb13 	bl	80023d8 <HAL_ADC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000db8:	f000 fcf8 	bl	80017ac <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGINTERL_INJECSIMULT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	482c      	ldr	r0, [pc, #176]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000dd2:	f003 fb61 	bl	8004498 <HAL_ADCEx_MultiModeConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000ddc:	f000 fce6 	bl	80017ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <MX_ADC1_Init+0x174>)
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de4:	2306      	movs	r3, #6
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000de8:	2302      	movs	r3, #2
 8000dea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dec:	237f      	movs	r3, #127	; 0x7f
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df0:	2304      	movs	r3, #4
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4821      	ldr	r0, [pc, #132]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000e00:	f001 fc92 	bl	8002728 <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000e0a:	f000 fccf 	bl	80017ac <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_ADC1_Init+0x178>)
 8000e10:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e12:	2309      	movs	r3, #9
 8000e14:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000e16:	2306      	movs	r3, #6
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	237f      	movs	r3, #127	; 0x7f
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000e50:	f002 fe42 	bl	8003ad8 <HAL_ADCEx_InjectedConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8000e5a:	f000 fca7 	bl	80017ac <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VBAT;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_ADC1_Init+0x17c>)
 8000e60:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e62:	f240 130f 	movw	r3, #271	; 0x10f
 8000e66:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_ADC1_Init+0x170>)
 8000e6e:	f002 fe33 	bl	8003ad8 <HAL_ADCEx_InjectedConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000e78:	f000 fc98 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200001a0 	.word	0x200001a0
 8000e88:	2a000400 	.word	0x2a000400
 8000e8c:	c3210000 	.word	0xc3210000
 8000e90:	c7520000 	.word	0xc7520000

08000e94 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b098      	sub	sp, #96	; 0x60
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f007 fcb6 	bl	8008814 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	223c      	movs	r2, #60	; 0x3c
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f007 fcb0 	bl	8008814 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000eb6:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <MX_ADC2_Init+0x12c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eba:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000eda:	2208      	movs	r2, #8
 8000edc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f00:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f0e:	482b      	ldr	r0, [pc, #172]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000f10:	f001 fa62 	bl	80023d8 <HAL_ADC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f1a:	f000 fc47 	bl	80017ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <MX_ADC2_Init+0x130>)
 8000f20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f22:	2306      	movs	r3, #6
 8000f24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f26:	2302      	movs	r3, #2
 8000f28:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f2a:	237f      	movs	r3, #127	; 0x7f
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.Offset = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481f      	ldr	r0, [pc, #124]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000f3e:	f001 fbf3 	bl	8002728 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000f48:	f000 fc30 	bl	80017ac <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_17;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <MX_ADC2_Init+0x134>)
 8000f4e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f50:	2309      	movs	r3, #9
 8000f52:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000f54:	2306      	movs	r3, #6
 8000f56:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f58:	237f      	movs	r3, #127	; 0x7f
 8000f5a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000f86:	f002 fda7 	bl	8003ad8 <HAL_ADCEx_InjectedConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000f90:	f000 fc0c 	bl	80017ac <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_ADC2_Init+0x138>)
 8000f96:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f98:	f240 130f 	movw	r3, #271	; 0x10f
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_ADC2_Init+0x128>)
 8000fa4:	f002 fd98 	bl	8003ad8 <HAL_ADCEx_InjectedConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 8000fae:	f000 fbfd 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3760      	adds	r7, #96	; 0x60
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000ac 	.word	0x200000ac
 8000fc0:	50000100 	.word	0x50000100
 8000fc4:	36902000 	.word	0x36902000
 8000fc8:	47520000 	.word	0x47520000
 8000fcc:	2a000400 	.word	0x2a000400

08000fd0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_COMP1_Init+0x44>)
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <MX_COMP1_Init+0x48>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_COMP1_Init+0x44>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_COMP1_Init+0x44>)
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_COMP1_Init+0x44>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_30MV;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_COMP1_Init+0x44>)
 8000fee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ff2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_COMP1_Init+0x44>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_COMP1_Init+0x44>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_COMP1_Init+0x44>)
 8001002:	f003 fb95 	bl	8004730 <HAL_COMP_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 800100c:	f000 fbce 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000011c 	.word	0x2000011c
 8001018:	40010200 	.word	0x40010200

0800101c <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_COMP3_Init+0x44>)
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <MX_COMP3_Init+0x48>)
 8001024:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_COMP3_Init+0x44>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_COMP3_Init+0x44>)
 800102e:	2240      	movs	r2, #64	; 0x40
 8001030:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_COMP3_Init+0x44>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_30MV;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_COMP3_Init+0x44>)
 800103a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800103e:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <MX_COMP3_Init+0x44>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_COMP3_Init+0x44>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_COMP3_Init+0x44>)
 800104e:	f003 fb6f 	bl	8004730 <HAL_COMP_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 8001058:	f000 fba8 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200002b8 	.word	0x200002b8
 8001064:	40010208 	.word	0x40010208

08001068 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_COMP4_Init+0x44>)
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <MX_COMP4_Init+0x48>)
 8001070:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_COMP4_Init+0x44>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_COMP4_Init+0x44>)
 800107a:	2240      	movs	r2, #64	; 0x40
 800107c:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_COMP4_Init+0x44>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_30MV;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_COMP4_Init+0x44>)
 8001086:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800108a:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_COMP4_Init+0x44>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_COMP4_Init+0x44>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_COMP4_Init+0x44>)
 800109a:	f003 fb49 	bl	8004730 <HAL_COMP_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_COMP4_Init+0x40>
  {
    Error_Handler();
 80010a4:	f000 fb82 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000017c 	.word	0x2000017c
 80010b0:	4001020c 	.word	0x4001020c

080010b4 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2230      	movs	r2, #48	; 0x30
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f007 fba7 	bl	8008814 <memset>
  /* USER CODE BEGIN DAC3_Init 1 */

  /* USER CODE END DAC3_Init 1 */
  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_DAC3_Init+0x80>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_DAC3_Init+0x84>)
 80010ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <MX_DAC3_Init+0x80>)
 80010ce:	f003 fd62 	bl	8004b96 <HAL_DAC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80010d8:	f000 fb68 	bl	80017ac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80010dc:	2302      	movs	r3, #2
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <MX_DAC3_Init+0x80>)
 8001108:	f003 fd68 	bl	8004bdc <HAL_DAC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001112:	f000 fb4b 	bl	80017ac <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	2210      	movs	r2, #16
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_DAC3_Init+0x80>)
 800111e:	f003 fd5d 	bl	8004bdc <HAL_DAC_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001128:	f000 fb40 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3730      	adds	r7, #48	; 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000098 	.word	0x20000098
 8001138:	50001000 	.word	0x50001000

0800113c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_OPAMP1_Init+0x48>)
 8001142:	4a11      	ldr	r2, [pc, #68]	; (8001188 <MX_OPAMP1_Init+0x4c>)
 8001144:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_OPAMP1_Init+0x48>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <MX_OPAMP1_Init+0x48>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_OPAMP1_Init+0x48>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_OPAMP1_Init+0x48>)
 800115a:	2208      	movs	r2, #8
 800115c:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_OPAMP1_Init+0x48>)
 8001160:	2200      	movs	r2, #0
 8001162:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_OPAMP1_Init+0x48>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_OPAMP1_Init+0x48>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_OPAMP1_Init+0x48>)
 8001172:	f004 fa53 	bl	800561c <HAL_OPAMP_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 800117c:	f000 fb16 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000140 	.word	0x20000140
 8001188:	40010300 	.word	0x40010300

0800118c <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <MX_OPAMP2_Init+0x48>)
 8001194:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 800119e:	2260      	movs	r2, #96	; 0x60
 80011a0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 80011a4:	2208      	movs	r2, #8
 80011a6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_OPAMP2_Init+0x44>)
 80011bc:	f004 fa2e 	bl	800561c <HAL_OPAMP_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 80011c6:	f000 faf1 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000058 	.word	0x20000058
 80011d4:	40010304 	.word	0x40010304

080011d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	2228      	movs	r2, #40	; 0x28
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 fb14 	bl	8008814 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80011fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001200:	f7ff fb64 	bl	80008cc <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff fb49 	bl	800089c <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800120a:	2308      	movs	r3, #8
 800120c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800120e:	2302      	movs	r3, #2
 8001210:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800121e:	2306      	movs	r3, #6
 8001220:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4826      	ldr	r0, [pc, #152]	; (80012c0 <MX_SPI3_Init+0xe8>)
 8001228:	f007 f9cd 	bl	80085c6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800122c:	2310      	movs	r3, #16
 800122e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001230:	2302      	movs	r3, #2
 8001232:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001240:	2306      	movs	r3, #6
 8001242:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <MX_SPI3_Init+0xe8>)
 800124a:	f007 f9bc 	bl	80085c6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800124e:	2320      	movs	r3, #32
 8001250:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001252:	2302      	movs	r3, #2
 8001254:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001262:	2306      	movs	r3, #6
 8001264:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4815      	ldr	r0, [pc, #84]	; (80012c0 <MX_SPI3_Init+0xe8>)
 800126c:	f007 f9ab 	bl	80085c6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001274:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001278:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 800127a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800127e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800128e:	2310      	movs	r3, #16
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001292:	2300      	movs	r3, #0
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800129a:	2307      	movs	r3, #7
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_SPI3_Init+0xec>)
 80012a6:	f007 fa32 	bl	800870e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80012aa:	2100      	movs	r1, #0
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_SPI3_Init+0xec>)
 80012ae:	f7ff fab9 	bl	8000824 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_SPI3_Init+0xec>)
 80012b4:	f7ff fac9 	bl	800084a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3740      	adds	r7, #64	; 0x40
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	48000400 	.word	0x48000400
 80012c4:	40003c00 	.word	0x40003c00

080012c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b09e      	sub	sp, #120	; 0x78
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80012e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2234      	movs	r2, #52	; 0x34
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f007 fa80 	bl	8008814 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001314:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001316:	4a6d      	ldr	r2, [pc, #436]	; (80014cc <MX_TIM1_Init+0x204>)
 8001318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800131a:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <MX_TIM1_Init+0x200>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001328:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800132c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001334:	4b64      	ldr	r3, [pc, #400]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <MX_TIM1_Init+0x200>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001340:	4861      	ldr	r0, [pc, #388]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001342:	f005 fa19 	bl	8006778 <HAL_TIM_Base_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800134c:	f000 fa2e 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001354:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001356:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800135a:	4619      	mov	r1, r3
 800135c:	485a      	ldr	r0, [pc, #360]	; (80014c8 <MX_TIM1_Init+0x200>)
 800135e:	f005 fefd 	bl	800715c <HAL_TIM_ConfigClockSource>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001368:	f000 fa20 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800136c:	4856      	ldr	r0, [pc, #344]	; (80014c8 <MX_TIM1_Init+0x200>)
 800136e:	f005 fa5a 	bl	8006826 <HAL_TIM_PWM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001378:	f000 fa18 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800137c:	2108      	movs	r1, #8
 800137e:	4852      	ldr	r0, [pc, #328]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001380:	f005 fbfe 	bl	8006b80 <HAL_TIM_OnePulse_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800138a:	f000 fa0f 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800139e:	4619      	mov	r1, r3
 80013a0:	4849      	ldr	r0, [pc, #292]	; (80014c8 <MX_TIM1_Init+0x200>)
 80013a2:	f006 fd57 	bl	8007e54 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 80013ac:	f000 f9fe 	bl	80017ac <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80013b0:	2301      	movs	r3, #1
 80013b2:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80013bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013c0:	461a      	mov	r2, r3
 80013c2:	2101      	movs	r1, #1
 80013c4:	4840      	ldr	r0, [pc, #256]	; (80014c8 <MX_TIM1_Init+0x200>)
 80013c6:	f006 fe67 	bl	8008098 <HAL_TIMEx_ConfigBreakInput>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80013d0:	f000 f9ec 	bl	80017ac <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80013d4:	2302      	movs	r3, #2
 80013d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80013d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013dc:	461a      	mov	r2, r3
 80013de:	2101      	movs	r1, #1
 80013e0:	4839      	ldr	r0, [pc, #228]	; (80014c8 <MX_TIM1_Init+0x200>)
 80013e2:	f006 fe59 	bl	8008098 <HAL_TIMEx_ConfigBreakInput>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013ec:	f000 f9de 	bl	80017ac <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP3;
 80013f0:	2308      	movs	r3, #8
 80013f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80013f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f8:	461a      	mov	r2, r3
 80013fa:	2101      	movs	r1, #1
 80013fc:	4832      	ldr	r0, [pc, #200]	; (80014c8 <MX_TIM1_Init+0x200>)
 80013fe:	f006 fe4b 	bl	8008098 <HAL_TIMEx_ConfigBreakInput>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001408:	f000 f9d0 	bl	80017ac <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 800140c:	2310      	movs	r3, #16
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001414:	461a      	mov	r2, r3
 8001416:	2101      	movs	r1, #1
 8001418:	482b      	ldr	r0, [pc, #172]	; (80014c8 <MX_TIM1_Init+0x200>)
 800141a:	f006 fe3d 	bl	8008098 <HAL_TIMEx_ConfigBreakInput>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8001424:	f000 f9c2 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001428:	2360      	movs	r3, #96	; 0x60
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 65000;
 800142c:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001432:	2302      	movs	r3, #2
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001436:	2308      	movs	r3, #8
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800143a:	2304      	movs	r3, #4
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001448:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800144c:	2204      	movs	r2, #4
 800144e:	4619      	mov	r1, r3
 8001450:	481d      	ldr	r0, [pc, #116]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001452:	f005 fd6f 	bl	8006f34 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 800145c:	f000 f9a6 	bl	80017ac <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001460:	4819      	ldr	r0, [pc, #100]	; (80014c8 <MX_TIM1_Init+0x200>)
 8001462:	f006 fef1 	bl	8008248 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800146a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800146c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001470:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 150;
 8001476:	2396      	movs	r3, #150	; 0x96
 8001478:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 5;
 8001486:	2305      	movs	r3, #5
 8001488:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_TIM1_Init+0x200>)
 80014aa:	f006 fd55 	bl	8007f58 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0x1f0>
  {
    Error_Handler();
 80014b4:	f000 f97a 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //TIM1->AF1 &= ~TIM1_AF1_BKINE; //DISABLE
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <MX_TIM1_Init+0x200>)
 80014ba:	f000 fc09 	bl	8001cd0 <HAL_TIM_MspPostInit>

}
 80014be:	bf00      	nop
 80014c0:	3778      	adds	r7, #120	; 0x78
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000026c 	.word	0x2000026c
 80014cc:	40012c00 	.word	0x40012c00

080014d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_TIM2_Init+0x94>)
 80014f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_TIM2_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_TIM2_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_TIM2_Init+0x94>)
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <MX_TIM2_Init+0x98>)
 8001506:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_TIM2_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM2_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_TIM2_Init+0x94>)
 8001516:	f005 f92f 	bl	8006778 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001520:	f000 f944 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_TIM2_Init+0x94>)
 8001532:	f005 fe13 	bl	800715c <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800153c:	f000 f936 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_TIM2_Init+0x94>)
 800154e:	f006 fc81 	bl	8007e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001558:	f000 f928 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200002dc 	.word	0x200002dc
 8001568:	0002980f 	.word	0x0002980f

0800156c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_TIM16_Init+0x44>)
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <MX_TIM16_Init+0x48>)
 8001574:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_TIM16_Init+0x44>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_TIM16_Init+0x44>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6799;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_TIM16_Init+0x44>)
 8001584:	f641 228f 	movw	r2, #6799	; 0x1a8f
 8001588:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_TIM16_Init+0x44>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MX_TIM16_Init+0x44>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_TIM16_Init+0x44>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_TIM16_Init+0x44>)
 800159e:	f005 f8eb 	bl	8006778 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80015a8:	f000 f900 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000032c 	.word	0x2000032c
 80015b4:	40014400 	.word	0x40014400

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80015bc:	2004      	movs	r0, #4
 80015be:	f7ff f955 	bl	800086c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff f952 	bl	800086c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	200b      	movs	r0, #11
 80015ce:	f003 faae 	bl	8004b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015d2:	200b      	movs	r0, #11
 80015d4:	f003 fac5 	bl	8004b62 <HAL_NVIC_EnableIRQ>

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <MX_GPIO_Init+0x118>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a3f      	ldr	r2, [pc, #252]	; (80016f4 <MX_GPIO_Init+0x118>)
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <MX_GPIO_Init+0x118>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a39      	ldr	r2, [pc, #228]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <MX_GPIO_Init+0x118>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <MX_GPIO_Init+0x118>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOP_LF_CHP_TIM16_CH1N_Pin|OV_OUT_BOTT_Pin|TOP_HF_CHP_TIM16_CH1_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001658:	4827      	ldr	r0, [pc, #156]	; (80016f8 <MX_GPIO_Init+0x11c>)
 800165a:	f003 ffad 	bl	80055b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PGOOD_DCDC_BOOST_Pin */
  GPIO_InitStruct.Pin = PGOOD_DCDC_BOOST_Pin;
 800165e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PGOOD_DCDC_BOOST_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4822      	ldr	r0, [pc, #136]	; (80016fc <MX_GPIO_Init+0x120>)
 8001674:	f003 fe1e 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_HF_MOS_BOTT_Pin DRV_LF_MOS_BOTT_Pin */
  GPIO_InitStruct.Pin = DRV_HF_MOS_BOTT_Pin|DRV_LF_MOS_BOTT_Pin;
 8001678:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f003 fe10 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_ADC_BOTT_Pin */
  GPIO_InitStruct.Pin = TRIG_ADC_BOTT_Pin;
 8001694:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_ADC_BOTT_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f003 fe01 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOP_LF_CHP_TIM16_CH1N_Pin OV_OUT_BOTT_Pin */
  GPIO_InitStruct.Pin = TOP_LF_CHP_TIM16_CH1N_Pin|OV_OUT_BOTT_Pin;
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <MX_GPIO_Init+0x11c>)
 80016ca:	f003 fdf3 	bl	80052b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOP_HF_CHP_TIM16_CH1_Pin */
  GPIO_InitStruct.Pin = TOP_HF_CHP_TIM16_CH1_Pin;
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOP_HF_CHP_TIM16_CH1_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_GPIO_Init+0x11c>)
 80016e8:	f003 fde4 	bl	80052b4 <HAL_GPIO_Init>

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48001800 	.word	0x48001800

08001700 <GetLSB>:

/* USER CODE BEGIN 4 */
uint16_t GetLSB(uint32_t intValue)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	return (intValue & 0x0000FFFF);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	b29b      	uxth	r3, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <GetMSB>:

uint16_t GetMSB(uint32_t intValue)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    return ((intValue & 0xFFFF0000)) >> 16;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	b29b      	uxth	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SPIx_Transfer2>:

        inp = *(volatile uint16_t *)&SPIx->DR;

}

void SPIx_Transfer2(SPI_TypeDef *SPIx, uint16_t *outp, uint16_t *inp, uint16_t count) {
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	807b      	strh	r3, [r7, #2]
    while(count--) {
 8001740:	e01d      	b.n	800177e <SPIx_Transfer2+0x4c>
        while(!(SPIx->SR & SPI_SR_TXE))
 8001742:	bf00      	nop
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f9      	beq.n	8001744 <SPIx_Transfer2+0x12>
            ;
        *(volatile uint16_t *)&SPIx->DR = *outp++;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c9a      	adds	r2, r3, #2
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	320c      	adds	r2, #12
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	8013      	strh	r3, [r2, #0]
        while(!(SPIx->SR & SPI_SR_RXNE))
 800175e:	bf00      	nop
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f9      	beq.n	8001760 <SPIx_Transfer2+0x2e>
            ;
        *inp++ = *(volatile uint16_t *)&SPIx->DR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f103 020c 	add.w	r2, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	1c99      	adds	r1, r3, #2
 8001776:	6079      	str	r1, [r7, #4]
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	b292      	uxth	r2, r2
 800177c:	801a      	strh	r2, [r3, #0]
    while(count--) {
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	807a      	strh	r2, [r7, #2]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1dc      	bne.n	8001742 <SPIx_Transfer2+0x10>
    }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_TIMEx_BreakCallback>:

void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); // Overcurrent Out To Two Level MOSFET Driver (Low default)
  //HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_2); // Second stage overcurrent and Boost/LDO Enable (High default)
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	SystemState = SPI_TRANSFER_ERROR;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <Error_Handler+0x10>)
 80017b2:	2209      	movs	r2, #9
 80017b4:	801a      	strh	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b6:	b672      	cpsid	i
}
 80017b8:	bf00      	nop
  __disable_irq();
  while (1)
 80017ba:	e7fe      	b.n	80017ba <Error_Handler+0xe>
 80017bc:	20000006 	.word	0x20000006

080017c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_MspInit+0x44>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_MspInit+0x44>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6613      	str	r3, [r2, #96]	; 0x60
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x44>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x44>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017f6:	f004 f8b7 	bl	8005968 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09e      	sub	sp, #120	; 0x78
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	2244      	movs	r2, #68	; 0x44
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f006 fff3 	bl	8008814 <memset>
  if(hadc->Instance==ADC1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001836:	d169      	bne.n	800190c <HAL_ADC_MspInit+0x104>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800183c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800183e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001842:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fda5 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001854:	f7ff ffaa 	bl	80017ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001858:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <HAL_ADC_MspInit+0x1c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a5b      	ldr	r2, [pc, #364]	; (80019cc <HAL_ADC_MspInit+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001862:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_ADC_MspInit+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d10b      	bne.n	8001882 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800186a:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b56      	ldr	r3, [pc, #344]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001882:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = HVDC_ADC1_IN10_Pin;
 800189a:	2301      	movs	r3, #1
 800189c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(HVDC_ADC1_IN10_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018aa:	4619      	mov	r1, r3
 80018ac:	4849      	ldr	r0, [pc, #292]	; (80019d4 <HAL_ADC_MspInit+0x1cc>)
 80018ae:	f003 fd01 	bl	80052b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018b4:	4a49      	ldr	r2, [pc, #292]	; (80019dc <HAL_ADC_MspInit+0x1d4>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018b8:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018ba:	2205      	movs	r2, #5
 80018bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018d8:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018e0:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018e2:	2220      	movs	r2, #32
 80018e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018ee:	483a      	ldr	r0, [pc, #232]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 80018f0:	f003 fb1c 	bl	8004f2c <HAL_DMA_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80018fa:	f7ff ff57 	bl	80017ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
 8001904:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_ADC_MspInit+0x1d0>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800190a:	e05a      	b.n	80019c2 <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a33      	ldr	r2, [pc, #204]	; (80019e0 <HAL_ADC_MspInit+0x1d8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d155      	bne.n	80019c2 <HAL_ADC_MspInit+0x1ba>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800191a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800191c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001920:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fd36 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8001932:	f7ff ff3b 	bl	80017ac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_ADC_MspInit+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_ADC_MspInit+0x1c4>)
 800193e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_ADC_MspInit+0x1c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10b      	bne.n	8001960 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 800194e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_ADC_MspInit+0x1c8>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VMON_VSUPPLY_Pin;
 8001990:	2302      	movs	r3, #2
 8001992:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001994:	2303      	movs	r3, #3
 8001996:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(VMON_VSUPPLY_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019a0:	4619      	mov	r1, r3
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <HAL_ADC_MspInit+0x1cc>)
 80019a4:	f003 fc86 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TMON_NTC_Pin|I_HVDC_ADC2_IN13_Pin;
 80019a8:	2330      	movs	r3, #48	; 0x30
 80019aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ac:	2303      	movs	r3, #3
 80019ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019be:	f003 fc79 	bl	80052b4 <HAL_GPIO_Init>
}
 80019c2:	bf00      	nop
 80019c4:	3778      	adds	r7, #120	; 0x78
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000054 	.word	0x20000054
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48001400 	.word	0x48001400
 80019d8:	2000020c 	.word	0x2000020c
 80019dc:	40020008 	.word	0x40020008
 80019e0:	50000100 	.word	0x50000100

080019e4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2e      	ldr	r2, [pc, #184]	; (8001abc <HAL_COMP_MspInit+0xd8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d119      	bne.n	8001a3a <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = HF_MOS_COMP1_INP_Pin;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HF_MOS_COMP1_INP_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f003 fc3e 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8001a38:	e03b      	b.n	8001ab2 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP3)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <HAL_COMP_MspInit+0xe0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d119      	bne.n	8001a78 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_MOS_COMP3_INP_Pin;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a60:	2303      	movs	r3, #3
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LF_MOS_COMP3_INP_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f003 fc1f 	bl	80052b4 <HAL_GPIO_Init>
}
 8001a76:	e01c      	b.n	8001ab2 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_COMP_MspInit+0xe4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d117      	bne.n	8001ab2 <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_COMP_MspInit+0xdc>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = I_HVDC_OPAMP2_COMP4_Pin;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_HVDC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4807      	ldr	r0, [pc, #28]	; (8001acc <HAL_COMP_MspInit+0xe8>)
 8001aae:	f003 fc01 	bl	80052b4 <HAL_GPIO_Init>
}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40010200 	.word	0x40010200
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010208 	.word	0x40010208
 8001ac8:	4001020c 	.word	0x4001020c
 8001acc:	48000400 	.word	0x48000400

08001ad0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_DAC_MspInit+0x38>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10b      	bne.n	8001afa <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_DAC_MspInit+0x3c>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_DAC_MspInit+0x3c>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_DAC_MspInit+0x3c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	50001000 	.word	0x50001000
 8001b0c:	40021000 	.word	0x40021000

08001b10 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <HAL_OPAMP_MspInit+0xcc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d119      	bne.n	8001b66 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = HVDC_OPAMP1_VOUT_Pin|HVDC_OPAMP1_VINN_Pin|HVDC_OPAMP1_VINP_Pin;
 8001b4a:	238c      	movs	r3, #140	; 0x8c
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f003 fba8 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 8001b64:	e035      	b.n	8001bd2 <HAL_OPAMP_MspInit+0xc2>
  else if(hopamp->Instance==OPAMP2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HAL_OPAMP_MspInit+0xd4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d130      	bne.n	8001bd2 <HAL_OPAMP_MspInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_OPAMP_MspInit+0xd0>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = I_HVDC_OPAMP2_OUT_Pin;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_HVDC_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb6:	f003 fb7d 	bl	80052b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_HVDC_OPAMP2_COMP4_Pin;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I_HVDC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <HAL_OPAMP_MspInit+0xd8>)
 8001bce:	f003 fb71 	bl	80052b4 <HAL_GPIO_Init>
}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40010300 	.word	0x40010300
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010304 	.word	0x40010304
 8001be8:	48000400 	.word	0x48000400

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2e      	ldr	r2, [pc, #184]	; (8001cc4 <HAL_TIM_Base_MspInit+0xd8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d132      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c18:	6613      	str	r3, [r2, #96]	; 0x60
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = OC_IN_Pin;
 8001c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c44:	2312      	movs	r3, #18
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001c50:	2309      	movs	r3, #9
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OC_IN_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5e:	f003 fb29 	bl	80052b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2018      	movs	r0, #24
 8001c68:	f002 ff61 	bl	8004b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001c6c:	2018      	movs	r0, #24
 8001c6e:	f002 ff78 	bl	8004b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c72:	e022      	b.n	8001cba <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
}
 8001c96:	e010      	b.n	8001cba <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM16)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_TIM_Base_MspInit+0xe0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10b      	bne.n	8001cba <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_TIM_Base_MspInit+0xdc>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
}
 8001cba:	bf00      	nop
 8001cbc:	3730      	adds	r7, #48	; 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40014400 	.word	0x40014400

08001cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_TIM_MspPostInit+0x68>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11d      	bne.n	8001d2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = OUT_OC_BOTT_Pin|TWO_LEVEL_OC_Pin;
 8001d0a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d14:	2302      	movs	r3, #2
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2a:	f003 fac3 	bl	80052b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40021000 	.word	0x40021000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 f8be 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	  if (DMA1->ISR & DMA_ISR_TCIF1)
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <DMA1_Channel1_IRQHandler+0x34>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <DMA1_Channel1_IRQHandler+0x28>
	  {

		aqusitionDMA1_1 = 1;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <DMA1_Channel1_IRQHandler+0x38>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
		DMA1_CLEAR_HTIF1 = 1;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <DMA1_Channel1_IRQHandler+0x3c>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
		DMA1_CLEAR_CTCIF1 = 1;
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <DMA1_Channel1_IRQHandler+0x40>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
		DMA1_CLEAR_GIF1 = 1;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <DMA1_Channel1_IRQHandler+0x44>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
	  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	20000040 	.word	0x20000040
 8001dd0:	42400088 	.word	0x42400088
 8001dd4:	42400084 	.word	0x42400084
 8001dd8:	42400080 	.word	0x42400080

08001ddc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001de2:	f004 ff27 	bl	8006c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000026c 	.word	0x2000026c

08001df0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <LoopForever+0xe>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e30:	4c0b      	ldr	r4, [pc, #44]	; (8001e60 <LoopForever+0x16>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3e:	f7ff ffd7 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f006 fcc3 	bl	80087cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e46:	f7fe fd5b 	bl	8000900 <main>

08001e4a <LoopForever>:

LoopForever:
    b LoopForever
 8001e4a:	e7fe      	b.n	8001e4a <LoopForever>
  ldr   r0, =_estack
 8001e4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001e58:	08008854 	.word	0x08008854
  ldr r2, =_sbss
 8001e5c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001e60:	2000037c 	.word	0x2000037c

08001e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC1_2_IRQHandler>

08001e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f002 fe51 	bl	8004b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e76:	200f      	movs	r0, #15
 8001e78:	f000 f80e 	bl	8001e98 <HAL_InitTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	e001      	b.n	8001e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e88:	f7ff fc9a 	bl	80017c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_InitTick+0x68>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d022      	beq.n	8001ef2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_InitTick+0x6c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_InitTick+0x68>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fe5c 	bl	8004b7e <HAL_SYSTICK_Config>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10f      	bne.n	8001eec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b0f      	cmp	r3, #15
 8001ed0:	d809      	bhi.n	8001ee6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eda:	f002 fe28 	bl	8004b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_InitTick+0x70>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e007      	b.n	8001ef6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e004      	b.n	8001ef6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e001      	b.n	8001ef6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000010 	.word	0x20000010
 8001f04:	20000008 	.word	0x20000008
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_IncTick+0x1c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_IncTick+0x20>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <HAL_IncTick+0x1c>)
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	20000378 	.word	0x20000378
 8001f2c:	20000010 	.word	0x20000010

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_GetTick+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000378 	.word	0x20000378

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff ffee 	bl	8001f30 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d004      	beq.n	8001f6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_Delay+0x40>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6c:	bf00      	nop
 8001f6e:	f7ff ffdf 	bl	8001f30 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d8f7      	bhi.n	8001f6e <HAL_Delay+0x26>
  {
  }
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000010 	.word	0x20000010

08001f8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3360      	adds	r3, #96	; 0x60
 8002006:	461a      	mov	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <LL_ADC_SetOffset+0x44>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	4313      	orrs	r3, r2
 8002024:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	03fff000 	.word	0x03fff000

0800203c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3360      	adds	r3, #96	; 0x60
 800204a:	461a      	mov	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3360      	adds	r3, #96	; 0x60
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800209e:	b480      	push	{r7}
 80020a0:	b087      	sub	sp, #28
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3360      	adds	r3, #96	; 0x60
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	615a      	str	r2, [r3, #20]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002156:	b480      	push	{r7}
 8002158:	b087      	sub	sp, #28
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3330      	adds	r3, #48	; 0x30
 8002166:	461a      	mov	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	4413      	add	r3, r2
 8002174:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	211f      	movs	r1, #31
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	f003 011f 	and.w	r1, r3, #31
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	431a      	orrs	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b087      	sub	sp, #28
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3314      	adds	r3, #20
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0e5b      	lsrs	r3, r3, #25
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0d1b      	lsrs	r3, r3, #20
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2107      	movs	r1, #7
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	401a      	ands	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0d1b      	lsrs	r3, r3, #20
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	431a      	orrs	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d10a      	bne.n	800222e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	431a      	orrs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800222c:	e00a      	b.n	8002244 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	43db      	mvns	r3, r3
 800223c:	401a      	ands	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	407f0000 	.word	0x407f0000

08002254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6093      	str	r3, [r2, #8]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800228c:	d101      	bne.n	8002292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002300:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800232c:	f043 0202 	orr.w	r2, r3, #2
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <LL_ADC_IsEnabled+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_ADC_IsEnabled+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b02      	cmp	r3, #2
 8002378:	d101      	bne.n	800237e <LL_ADC_IsDisableOngoing+0x18>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_ADC_IsDisableOngoing+0x1a>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d101      	bne.n	80023a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d101      	bne.n	80023ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e16d      	b.n	80026ce <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff fa01 	bl	8001808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff2d 	bl	8002278 <LL_ADC_IsDeepPowerDownEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff13 	bl	8002254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff48 	bl	80022c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d115      	bne.n	800246a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff2c 	bl	80022a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002448:	4ba3      	ldr	r3, [pc, #652]	; (80026d8 <HAL_ADC_Init+0x300>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	4aa3      	ldr	r2, [pc, #652]	; (80026dc <HAL_ADC_Init+0x304>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800245c:	e002      	b.n	8002464 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3b01      	subs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff2a 	bl	80022c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff76 	bl	800238c <LL_ADC_REG_IsConversionOngoing>
 80024a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8106 	bne.w	80026bc <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8102 	bne.w	80026bc <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c0:	f043 0202 	orr.w	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff37 	bl	8002340 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024dc:	f7ff ff30 	bl	8002340 <LL_ADC_IsEnabled>
 80024e0:	4604      	mov	r4, r0
 80024e2:	487f      	ldr	r0, [pc, #508]	; (80026e0 <HAL_ADC_Init+0x308>)
 80024e4:	f7ff ff2c 	bl	8002340 <LL_ADC_IsEnabled>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4323      	orrs	r3, r4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4619      	mov	r1, r3
 80024f6:	487b      	ldr	r0, [pc, #492]	; (80026e4 <HAL_ADC_Init+0x30c>)
 80024f8:	f7ff fd48 	bl	8001f8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7f5b      	ldrb	r3, [r3, #29]
 8002500:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002506:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800250c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002512:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002526:	2b01      	cmp	r3, #1
 8002528:	d106      	bne.n	8002538 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	3b01      	subs	r3, #1
 8002530:	045b      	lsls	r3, r3, #17
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_ADC_Init+0x310>)
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	430b      	orrs	r3, r1
 8002566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff02 	bl	800238c <LL_ADC_REG_IsConversionOngoing>
 8002588:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff0f 	bl	80023b2 <LL_ADC_INJ_IsConversionOngoing>
 8002594:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d16d      	bne.n	8002678 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d16a      	bne.n	8002678 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025be:	f023 0302 	bic.w	r3, r3, #2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d017      	beq.n	8002604 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6911      	ldr	r1, [r2, #16]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002602:	e013      	b.n	800262c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002628:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002632:	2b01      	cmp	r3, #1
 8002634:	d118      	bne.n	8002668 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800264c:	4311      	orrs	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002658:	430a      	orrs	r2, r1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	e007      	b.n	8002678 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10c      	bne.n	800269a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f023 010f 	bic.w	r1, r3, #15
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	1e5a      	subs	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
 8002698:	e007      	b.n	80026aa <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020f 	bic.w	r2, r2, #15
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	f023 0303 	bic.w	r3, r3, #3
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ba:	e007      	b.n	80026cc <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f043 0210 	orr.w	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000008 	.word	0x20000008
 80026dc:	053e2d63 	.word	0x053e2d63
 80026e0:	50000100 	.word	0x50000100
 80026e4:	50000300 	.word	0x50000300
 80026e8:	fff04007 	.word	0xfff04007

080026ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0b6      	sub	sp, #216	; 0xd8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x22>
 8002746:	2302      	movs	r3, #2
 8002748:	e3c8      	b.n	8002edc <HAL_ADC_ConfigChannel+0x7b4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fe18 	bl	800238c <LL_ADC_REG_IsConversionOngoing>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 83ad 	bne.w	8002ebe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	f7ff fcf0 	bl	8002156 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fe06 	bl	800238c <LL_ADC_REG_IsConversionOngoing>
 8002780:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fe12 	bl	80023b2 <LL_ADC_INJ_IsConversionOngoing>
 800278e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002792:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 81d9 	bne.w	8002b4e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800279c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 81d4 	bne.w	8002b4e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ae:	d10f      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7ff fcf7 	bl	80021ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fc9e 	bl	800210a <LL_ADC_SetSamplingTimeCommonConfig>
 80027ce:	e00e      	b.n	80027ee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	461a      	mov	r2, r3
 80027de:	f7ff fce6 	bl	80021ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fc8e 	bl	800210a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d022      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6919      	ldr	r1, [r3, #16]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002820:	f7ff fbe8 	bl	8001ff4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6919      	ldr	r1, [r3, #16]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	461a      	mov	r2, r3
 8002832:	f7ff fc34 	bl	800209e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	7f1b      	ldrb	r3, [r3, #28]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_ADC_ConfigChannel+0x124>
 8002846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284a:	e000      	b.n	800284e <HAL_ADC_ConfigChannel+0x126>
 800284c:	2300      	movs	r3, #0
 800284e:	461a      	mov	r2, r3
 8002850:	f7ff fc40 	bl	80020d4 <LL_ADC_SetOffsetSaturation>
 8002854:	e17b      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fbed 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x15a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fbe2 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	e01e      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x198>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fbd7 	bl	800203c <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e004      	b.n	80028be <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80028b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1b0>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	e018      	b.n	800290a <HAL_ADC_ConfigChannel+0x1e2>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80028fc:	2320      	movs	r3, #32
 80028fe:	e004      	b.n	800290a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800290a:	429a      	cmp	r2, r3
 800290c:	d106      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fba6 	bl	8002068 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fb8a 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x220>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2101      	movs	r1, #1
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fb7f 	bl	800203c <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	f003 021f 	and.w	r2, r3, #31
 8002946:	e01e      	b.n	8002986 <HAL_ADC_ConfigChannel+0x25e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb74 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800296a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800296e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e004      	b.n	8002984 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800297a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_ConfigChannel+0x276>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	e018      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x2a8>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e004      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80029c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fb43 	bl	8002068 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2102      	movs	r1, #2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fb27 	bl	800203c <LL_ADC_GetOffsetChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x2e6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fb1c 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002a04:	4603      	mov	r3, r0
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	e01e      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x324>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2102      	movs	r1, #2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fb11 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e004      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x33c>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	e016      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x36a>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e004      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d106      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fae2 	bl	8002068 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fac6 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x3a8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2103      	movs	r1, #3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fabb 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 021f 	and.w	r2, r3, #31
 8002ace:	e017      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x3d8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fab0 	bl	800203c <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002af2:	2320      	movs	r3, #32
 8002af4:	e003      	b.n	8002afe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x3f0>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0e9b      	lsrs	r3, r3, #26
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	e011      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x414>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d106      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2103      	movs	r1, #3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fa8d 	bl	8002068 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fbf4 	bl	8002340 <LL_ADC_IsEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 8140 	bne.w	8002de0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6819      	ldr	r1, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f7ff fb49 	bl	8002204 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a8f      	ldr	r2, [pc, #572]	; (8002db4 <HAL_ADC_ConfigChannel+0x68c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f040 8131 	bne.w	8002de0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x47e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0e9b      	lsrs	r3, r3, #26
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2b09      	cmp	r3, #9
 8002b9c:	bf94      	ite	ls
 8002b9e:	2301      	movls	r3, #1
 8002ba0:	2300      	movhi	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	e019      	b.n	8002bda <HAL_ADC_ConfigChannel+0x4b2>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	e003      	b.n	8002bca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	bf94      	ite	ls
 8002bd4:	2301      	movls	r3, #1
 8002bd6:	2300      	movhi	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d079      	beq.n	8002cd2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x4d2>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	069b      	lsls	r3, r3, #26
 8002bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf8:	e015      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x4fe>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e003      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	069b      	lsls	r3, r3, #26
 8002c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x51e>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	e017      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x54e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e003      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	ea42 0103 	orr.w	r1, r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x574>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f003 021f 	and.w	r2, r3, #31
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	051b      	lsls	r3, r3, #20
 8002c9a:	e018      	b.n	8002cce <HAL_ADC_ConfigChannel+0x5a6>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f003 021f 	and.w	r2, r3, #31
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	e081      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x5c6>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cec:	e015      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x5f2>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e003      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	069b      	lsls	r3, r3, #26
 8002d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x612>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	0e9b      	lsrs	r3, r3, #26
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	e017      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x642>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	61fb      	str	r3, [r7, #28]
  return result;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002d52:	2320      	movs	r3, #32
 8002d54:	e003      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	ea42 0103 	orr.w	r1, r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x66e>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	3301      	adds	r3, #1
 8002d82:	f003 021f 	and.w	r2, r3, #31
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b1e      	subs	r3, #30
 8002d8e:	051b      	lsls	r3, r3, #20
 8002d90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d94:	e01e      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x6ac>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	613b      	str	r3, [r7, #16]
  return result;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e006      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x698>
 8002db2:	bf00      	nop
 8002db4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b1e      	subs	r3, #30
 8002dce:	051b      	lsls	r3, r3, #20
 8002dd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7ff f9e7 	bl	80021ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d071      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dec:	483e      	ldr	r0, [pc, #248]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dee:	f7ff f8f3 	bl	8001fd8 <LL_ADC_GetCommonPathInternalCh>
 8002df2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3c      	ldr	r2, [pc, #240]	; (8002eec <HAL_ADC_ConfigChannel+0x7c4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_ADC_ConfigChannel+0x6e2>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d127      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d121      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1e:	d157      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e28:	4619      	mov	r1, r3
 8002e2a:	482f      	ldr	r0, [pc, #188]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e2c:	f7ff f8c1 	bl	8001fb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e4a:	e002      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f9      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e58:	e03a      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_ADC_ConfigChannel+0x7d4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d113      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x764>
 8002e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02a      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	4619      	mov	r1, r3
 8002e84:	4818      	ldr	r0, [pc, #96]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e86:	f7ff f894 	bl	8001fb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8a:	e021      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d11c      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d011      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002eb8:	f7ff f87b 	bl	8001fb2 <LL_ADC_SetCommonPathInternalCh>
 8002ebc:	e008      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	f043 0220 	orr.w	r2, r3, #32
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ed8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	37d8      	adds	r7, #216	; 0xd8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	80080000 	.word	0x80080000
 8002ee8:	50000300 	.word	0x50000300
 8002eec:	c3210000 	.word	0xc3210000
 8002ef0:	90c00010 	.word	0x90c00010
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	053e2d63 	.word	0x053e2d63
 8002efc:	c7520000 	.word	0xc7520000
 8002f00:	50000100 	.word	0x50000100
 8002f04:	cb840000 	.word	0xcb840000

08002f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fa13 	bl	8002340 <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d14d      	bne.n	8002fbc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <ADC_Enable+0xc0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e039      	b.n	8002fbe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f9ce 	bl	80022f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f54:	f7fe ffec 	bl	8001f30 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5a:	e028      	b.n	8002fae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f9ed 	bl	8002340 <LL_ADC_IsEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f9bd 	bl	80022f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f76:	f7fe ffdb 	bl	8001f30 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d914      	bls.n	8002fae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00d      	beq.n	8002fae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d1cf      	bne.n	8002f5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	8000003f 	.word	0x8000003f

08002fcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff f9c4 	bl	8002366 <LL_ADC_IsDisableOngoing>
 8002fde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f9ab 	bl	8002340 <LL_ADC_IsEnabled>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d047      	beq.n	8003080 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d144      	bne.n	8003080 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030d 	and.w	r3, r3, #13
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10c      	bne.n	800301e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f985 	bl	8002318 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2203      	movs	r2, #3
 8003014:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003016:	f7fe ff8b 	bl	8001f30 <HAL_GetTick>
 800301a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800301c:	e029      	b.n	8003072 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e023      	b.n	8003082 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800303a:	f7fe ff79 	bl	8001f30 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d914      	bls.n	8003072 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f043 0210 	orr.w	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1dc      	bne.n	800303a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d14b      	bne.n	800313c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d021      	beq.n	8003102 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f834 	bl	8002130 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d032      	beq.n	8003134 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d12b      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11f      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003100:	e018      	b.n	8003134 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d111      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff fad9 	bl	80026ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800313a:	e00e      	b.n	800315a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff fae3 	bl	8002714 <HAL_ADC_ErrorCallback>
}
 800314e:	e004      	b.n	800315a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff fac5 	bl	8002700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff fab5 	bl	8002714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <LL_ADC_SetCommonPathInternalCh>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_GetCommonPathInternalCh>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_SetOffset>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3360      	adds	r3, #96	; 0x60
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <LL_ADC_SetOffset+0x44>)
 8003216:	4013      	ands	r3, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	4313      	orrs	r3, r2
 8003224:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	03fff000 	.word	0x03fff000

0800323c <LL_ADC_GetOffsetChannel>:
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3360      	adds	r3, #96	; 0x60
 800324a:	461a      	mov	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_SetOffsetState>:
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	431a      	orrs	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	601a      	str	r2, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_ADC_SetOffsetSign>:
{
 800329e:	b480      	push	{r7}
 80032a0:	b087      	sub	sp, #28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3360      	adds	r3, #96	; 0x60
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_ADC_SetOffsetSaturation>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3360      	adds	r3, #96	; 0x60
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	601a      	str	r2, [r3, #0]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	615a      	str	r2, [r3, #20]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_ADC_INJ_GetTrigAuto>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_ADC_SetChannelSamplingTime>:
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3314      	adds	r3, #20
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	0e5b      	lsrs	r3, r3, #25
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	4413      	add	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	0d1b      	lsrs	r3, r3, #20
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2107      	movs	r1, #7
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	401a      	ands	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	0d1b      	lsrs	r3, r3, #20
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	431a      	orrs	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <LL_ADC_SetChannelSingleDiff>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a0f      	ldr	r2, [pc, #60]	; (800343c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10a      	bne.n	800341a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003418:	e00a      	b.n	8003430 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	407f0000 	.word	0x407f0000

08003440 <LL_ADC_GetMultimode>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 031f 	and.w	r3, r3, #31
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_IsEnabled>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <LL_ADC_IsEnabled+0x18>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <LL_ADC_IsEnabled+0x1a>
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_StartCalibration>:
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800349e:	4313      	orrs	r3, r2
 80034a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c8:	d101      	bne.n	80034ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_REG_StartConversion>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_REG_IsConversionOngoing>:
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d101      	bne.n	800351c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_ADC_INJ_StartConversion>:
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800353e:	f043 0208 	orr.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b08      	cmp	r3, #8
 8003564:	d101      	bne.n	800356a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_ADCEx_Calibration_Start+0x1c>
 8003590:	2302      	movs	r3, #2
 8003592:	e04d      	b.n	8003630 <HAL_ADCEx_Calibration_Start+0xb8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fd15 	bl	8002fcc <ADC_Disable>
 80035a2:	4603      	mov	r3, r0
 80035a4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d136      	bne.n	800361a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035b4:	f023 0302 	bic.w	r3, r3, #2
 80035b8:	f043 0202 	orr.w	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff5b 	bl	8003482 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80035cc:	e014      	b.n	80035f8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3301      	adds	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_ADCEx_Calibration_Start+0xc0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d90d      	bls.n	80035f8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f023 0312 	bic.w	r3, r3, #18
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e01b      	b.n	8003630 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff59 	bl	80034b4 <LL_ADC_IsCalibrationOnGoing>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e2      	bne.n	80035ce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	f023 0303 	bic.w	r3, r3, #3
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c
 8003618:	e005      	b.n	8003626 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	f043 0210 	orr.w	r2, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	0004de01 	.word	0x0004de01

0800363c <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003644:	4853      	ldr	r0, [pc, #332]	; (8003794 <HAL_ADCEx_InjectedStart+0x158>)
 8003646:	f7ff fefb 	bl	8003440 <LL_ADC_GetMultimode>
 800364a:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff7e 	bl	8003552 <LL_ADC_INJ_IsConversionOngoing>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
 800365e:	e094      	b.n	800378a <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800366a:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e07c      	b.n	800378a <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_ADCEx_InjectedStart+0x62>
 800369a:	2302      	movs	r3, #2
 800369c:	e075      	b.n	800378a <HAL_ADCEx_InjectedStart+0x14e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fc2e 	bl	8002f08 <ADC_Enable>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d164      	bne.n	8003780 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	f023 0208 	bic.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
 80036ce:	e002      	b.n	80036d6 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <HAL_ADCEx_InjectedStart+0x15c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d002      	beq.n	80036fa <HAL_ADCEx_InjectedStart+0xbe>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	e001      	b.n	80036fe <HAL_ADCEx_InjectedStart+0xc2>
 80036fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4293      	cmp	r3, r2
 8003704:	d002      	beq.n	800370c <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2260      	movs	r2, #96	; 0x60
 800371e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <HAL_ADCEx_InjectedStart+0x15c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d002      	beq.n	8003738 <HAL_ADCEx_InjectedStart+0xfc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	e001      	b.n	800373c <HAL_ADCEx_InjectedStart+0x100>
 8003738:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	4293      	cmp	r3, r2
 8003742:	d008      	beq.n	8003756 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b06      	cmp	r3, #6
 800374e:	d002      	beq.n	8003756 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b07      	cmp	r3, #7
 8003754:	d10d      	bne.n	8003772 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fe0e 	bl	800337c <LL_ADC_INJ_GetTrigAuto>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d110      	bne.n	8003788 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fedd 	bl	800352a <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003770:	e00a      	b.n	8003788 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	65da      	str	r2, [r3, #92]	; 0x5c
 800377e:	e003      	b.n	8003788 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	50000300 	.word	0x50000300
 8003798:	50000100 	.word	0x50000100

0800379c <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037a6:	485d      	ldr	r0, [pc, #372]	; (800391c <HAL_ADCEx_InjectedPollForConversion+0x180>)
 80037a8:	f7ff fe4a 	bl	8003440 <LL_ADC_GetMultimode>
 80037ac:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d102      	bne.n	80037bc <HAL_ADCEx_InjectedPollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
 80037b6:	2340      	movs	r3, #64	; 0x40
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	e001      	b.n	80037c0 <HAL_ADCEx_InjectedPollForConversion+0x24>
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 80037bc:	2320      	movs	r3, #32
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80037c0:	f7fe fbb6 	bl	8001f30 <HAL_GetTick>
 80037c4:	61b8      	str	r0, [r7, #24]

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80037c6:	e021      	b.n	800380c <HAL_ADCEx_InjectedPollForConversion+0x70>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d01d      	beq.n	800380c <HAL_ADCEx_InjectedPollForConversion+0x70>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80037d0:	f7fe fbae 	bl	8001f30 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d302      	bcc.n	80037e6 <HAL_ADCEx_InjectedPollForConversion+0x4a>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d112      	bne.n	800380c <HAL_ADCEx_InjectedPollForConversion+0x70>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_ADCEx_InjectedPollForConversion+0x70>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e082      	b.n	8003912 <HAL_ADCEx_InjectedPollForConversion+0x176>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0d6      	beq.n	80037c8 <HAL_ADCEx_InjectedPollForConversion+0x2c>
      }
    }
  }

  /* Retrieve ADC configuration */
  tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fd99 	bl	8003356 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003824:	6178      	str	r0, [r7, #20]
  tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fd80 	bl	8003330 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003830:	6138      	str	r0, [r7, #16]
  /* Get relevant register CFGR in ADC instance of ADC master or slave  */
  /* in function of multimode state (for devices with multimode         */
  /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3a      	ldr	r2, [pc, #232]	; (8003920 <HAL_ADCEx_InjectedPollForConversion+0x184>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d002      	beq.n	8003842 <HAL_ADCEx_InjectedPollForConversion+0xa6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	e001      	b.n	8003846 <HAL_ADCEx_InjectedPollForConversion+0xaa>
 8003842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	4293      	cmp	r3, r2
 800384c:	d008      	beq.n	8003860 <HAL_ADCEx_InjectedPollForConversion+0xc4>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_ADCEx_InjectedPollForConversion+0xc4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d002      	beq.n	8003860 <HAL_ADCEx_InjectedPollForConversion+0xc4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b07      	cmp	r3, #7
 800385e:	d104      	bne.n	800386a <HAL_ADCEx_InjectedPollForConversion+0xce>
     )
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	e00d      	b.n	8003886 <HAL_ADCEx_InjectedPollForConversion+0xea>
  }
  else
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <HAL_ADCEx_InjectedPollForConversion+0x184>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d002      	beq.n	800387a <HAL_ADCEx_InjectedPollForConversion+0xde>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	e001      	b.n	800387e <HAL_ADCEx_InjectedPollForConversion+0xe2>
 800387a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800387e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	623b      	str	r3, [r7, #32]
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10c      	bne.n	80038b2 <HAL_ADCEx_InjectedPollForConversion+0x116>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d125      	bne.n	80038ee <HAL_ADCEx_InjectedPollForConversion+0x152>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_ADCEx_InjectedPollForConversion+0x152>
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11d      	bne.n	80038ee <HAL_ADCEx_InjectedPollForConversion+0x152>
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d116      	bne.n	80038ee <HAL_ADCEx_InjectedPollForConversion+0x152>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d111      	bne.n	80038ee <HAL_ADCEx_InjectedPollForConversion+0x152>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	65da      	str	r2, [r3, #92]	; 0x5c

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_ADCEx_InjectedPollForConversion+0x152>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d109      	bne.n	8003908 <HAL_ADCEx_InjectedPollForConversion+0x16c>
  {
    /* Clear end of sequence JEOS flag of injected group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
    /* For injected groups, no new conversion will start before JEOS is       */
    /* cleared.                                                               */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <HAL_ADCEx_InjectedPollForConversion+0x174>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2260      	movs	r2, #96	; 0x60
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	e003      	b.n	8003910 <HAL_ADCEx_InjectedPollForConversion+0x174>
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2220      	movs	r2, #32
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3728      	adds	r7, #40	; 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	50000300 	.word	0x50000300
 8003920:	50000100 	.word	0x50000100

08003924 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b0a2      	sub	sp, #136	; 0x88
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fde5 	bl	8003504 <LL_ADC_REG_IsConversionOngoing>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	e082      	b.n	8003a4a <HAL_ADCEx_MultiModeStart_DMA+0x126>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800394e:	2302      	movs	r3, #2
 8003950:	e07b      	b.n	8003a4a <HAL_ADCEx_MultiModeStart_DMA+0x126>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800395a:	2300      	movs	r3, #0
 800395c:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800395e:	2300      	movs	r3, #0
 8003960:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396a:	d102      	bne.n	8003972 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 800396c:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e001      	b.n	8003976 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e05a      	b.n	8003a4a <HAL_ADCEx_MultiModeStart_DMA+0x126>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f7ff fab7 	bl	8002f08 <ADC_Enable>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80039a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff faab 	bl	8002f08 <ADC_Enable>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80039b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13e      	bne.n	8003a3e <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 80039e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039f2:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 80039f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	221c      	movs	r2, #28
 80039fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0210 	orr.w	r2, r2, #16
 8003a16:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a20:	330c      	adds	r3, #12
 8003a22:	4619      	mov	r1, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f001 fb28 	bl	800507c <HAL_DMA_Start_IT>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fd50 	bl	80034dc <LL_ADC_REG_StartConversion>
 8003a3c:	e003      	b.n	8003a46 <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003a46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3788      	adds	r7, #136	; 0x88
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	50000100 	.word	0x50000100
 8003a58:	0800308b 	.word	0x0800308b
 8003a5c:	08003163 	.word	0x08003163
 8003a60:	0800317f 	.word	0x0800317f
 8003a64:	50000300 	.word	0x50000300

08003a68 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f240 321b 	movw	r2, #795	; 0x31b
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_ADCEx_InjectedGetValue+0x32>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8003a82:	d21c      	bcs.n	8003abe <HAL_ADCEx_InjectedGetValue+0x56>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f240 120f 	movw	r2, #271	; 0x10f
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d011      	beq.n	8003ab2 <HAL_ADCEx_InjectedGetValue+0x4a>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f240 2215 	movw	r2, #533	; 0x215
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d006      	beq.n	8003aa6 <HAL_ADCEx_InjectedGetValue+0x3e>
 8003a98:	e011      	b.n	8003abe <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa2:	60fb      	str	r3, [r7, #12]
      break;
 8003aa4:	e011      	b.n	8003aca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	60fb      	str	r3, [r7, #12]
      break;
 8003ab0:	e00b      	b.n	8003aca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	60fb      	str	r3, [r7, #12]
      break;
 8003abc:	e005      	b.n	8003aca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac6:	60fb      	str	r3, [r7, #12]
      break;
 8003ac8:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0b6      	sub	sp, #216	; 0xd8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f000 bcb5 	b.w	800446c <HAL_ADCEx_InjectedConfigChannel+0x994>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d130      	bne.n	8003b7c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	d179      	bne.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0e9b      	lsrs	r3, r3, #26
 8003b30:	025b      	lsls	r3, r3, #9
 8003b32:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003b3e:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b4a:	e007      	b.n	8003b5c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	025b      	lsls	r3, r3, #9
 8003b54:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b62:	4ba3      	ldr	r3, [pc, #652]	; (8003df0 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b78:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003b7a:	e04c      	b.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11d      	bne.n	8003bc0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003ba8:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb4:	e004      	b.n	8003bc0 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e9b      	lsrs	r3, r3, #26
 8003bc6:	f003 021f 	and.w	r2, r3, #31
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be4:	1e5a      	subs	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c06:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	430b      	orrs	r3, r1
 8003c14:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fc99 	bl	8003552 <LL_ADC_INJ_IsConversionOngoing>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d124      	bne.n	8003c70 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d112      	bne.n	8003c56 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c40:	055a      	lsls	r2, r3, #21
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c48:	051b      	lsls	r3, r3, #20
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e00c      	b.n	8003c70 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c66:	055a      	lsls	r2, r3, #21
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fc45 	bl	8003504 <LL_ADC_REG_IsConversionOngoing>
 8003c7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fc65 	bl	8003552 <LL_ADC_INJ_IsConversionOngoing>
 8003c88:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f040 822e 	bne.w	80040f2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 8229 	bne.w	80040f2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d116      	bne.n	8003cde <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003cc8:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003cca:	e01f      	b.n	8003d0c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003cda:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003cdc:	e016      	b.n	8003d0c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d109      	bne.n	8003cfc <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003cfa:	e007      	b.n	8003d0c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003d0a:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d110      	bne.n	8003d38 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0202 	orr.w	r2, r2, #2
 8003d34:	611a      	str	r2, [r3, #16]
 8003d36:	e007      	b.n	8003d48 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0202 	bic.w	r2, r2, #2
 8003d46:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d50:	d10f      	bne.n	8003d72 <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f7ff fb1b 	bl	8003398 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff facd 	bl	800330a <LL_ADC_SetSamplingTimeCommonConfig>
 8003d70:	e00e      	b.n	8003d90 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7ff fb0a 	bl	8003398 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fabd 	bl	800330a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	08db      	lsrs	r3, r3, #3
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d025      	beq.n	8003dfe <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6919      	ldr	r1, [r3, #16]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dc2:	f7ff fa17 	bl	80031f4 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6919      	ldr	r1, [r3, #16]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f7ff fa63 	bl	800329e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dec:	e003      	b.n	8003df6 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003dee:	bf00      	nop
 8003df0:	04104000 	.word	0x04104000
 8003df4:	2300      	movs	r3, #0
 8003df6:	461a      	mov	r2, r3
 8003df8:	f7ff fa6c 	bl	80032d4 <LL_ADC_SetOffsetSaturation>
 8003dfc:	e179      	b.n	80040f2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fa19 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fa0e 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	0e9b      	lsrs	r3, r3, #26
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	e01e      	b.n	8003e68 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fa03 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003e48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003e50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003e58:	2320      	movs	r3, #32
 8003e5a:	e004      	b.n	8003e66 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003e5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	e018      	b.n	8003eb2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003e9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	e004      	b.n	8003eb2 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d106      	bne.n	8003ec4 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f9d2 	bl	8003268 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff f9b6 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f9ab 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	f003 021f 	and.w	r2, r3, #31
 8003eee:	e01e      	b.n	8003f2e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff f9a0 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003f1e:	2320      	movs	r3, #32
 8003f20:	e004      	b.n	8003f2c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	0e9b      	lsrs	r3, r3, #26
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	e018      	b.n	8003f78 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	e004      	b.n	8003f78 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d106      	bne.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff f96f 	bl	8003268 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f953 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f948 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	0e9b      	lsrs	r3, r3, #26
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	e01e      	b.n	8003ff4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff f93d 	bl	800323c <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e004      	b.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0e9b      	lsrs	r3, r3, #26
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	e014      	b.n	8004036 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e004      	b.n	8004036 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 800402c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004036:	429a      	cmp	r2, r3
 8004038:	d106      	bne.n	8004048 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2200      	movs	r2, #0
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff f910 	bl	8003268 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2103      	movs	r1, #3
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f8f4 	bl	800323c <LL_ADC_GetOffsetChannel>
 8004054:	4603      	mov	r3, r0
 8004056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2103      	movs	r1, #3
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff f8e9 	bl	800323c <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	f003 021f 	and.w	r2, r3, #31
 8004072:	e017      	b.n	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2103      	movs	r1, #3
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f8de 	bl	800323c <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	e003      	b.n	80040a2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800409a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	e011      	b.n	80040e0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80040ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80040ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80040d4:	2320      	movs	r3, #32
 80040d6:	e003      	b.n	80040e0 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80040d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d106      	bne.n	80040f2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2103      	movs	r1, #3
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f8bb 	bl	8003268 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f9b0 	bl	800345c <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 8140 	bne.w	8004384 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6819      	ldr	r1, [r3, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	461a      	mov	r2, r3
 8004112:	f7ff f96d 	bl	80033f0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4a8f      	ldr	r2, [pc, #572]	; (8004358 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 800411c:	4293      	cmp	r3, r2
 800411e:	f040 8131 	bne.w	8004384 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	0e9b      	lsrs	r3, r3, #26
 8004138:	3301      	adds	r3, #1
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2b09      	cmp	r3, #9
 8004140:	bf94      	ite	ls
 8004142:	2301      	movls	r3, #1
 8004144:	2300      	movhi	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e019      	b.n	800417e <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800415c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004162:	2320      	movs	r3, #32
 8004164:	e003      	b.n	800416e <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004168:	fab3 f383 	clz	r3, r3
 800416c:	b2db      	uxtb	r3, r3
 800416e:	3301      	adds	r3, #1
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2b09      	cmp	r3, #9
 8004176:	bf94      	ite	ls
 8004178:	2301      	movls	r3, #1
 800417a:	2300      	movhi	r3, #0
 800417c:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800417e:	2b00      	cmp	r3, #0
 8004180:	d079      	beq.n	8004276 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0e9b      	lsrs	r3, r3, #26
 8004194:	3301      	adds	r3, #1
 8004196:	069b      	lsls	r3, r3, #26
 8004198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800419c:	e015      	b.n	80041ca <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80041ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	069b      	lsls	r3, r3, #26
 80041c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_ADCEx_InjectedConfigChannel+0x712>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	0e9b      	lsrs	r3, r3, #26
 80041dc:	3301      	adds	r3, #1
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	e017      	b.n	800421a <HAL_ADCEx_InjectedConfigChannel+0x742>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80041f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80041fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004202:	2320      	movs	r3, #32
 8004204:	e003      	b.n	800420e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	3301      	adds	r3, #1
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	ea42 0103 	orr.w	r1, r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0e9b      	lsrs	r3, r3, #26
 8004230:	3301      	adds	r3, #1
 8004232:	f003 021f 	and.w	r2, r3, #31
 8004236:	4613      	mov	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4413      	add	r3, r2
 800423c:	051b      	lsls	r3, r3, #20
 800423e:	e018      	b.n	8004272 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004258:	2320      	movs	r3, #32
 800425a:	e003      	b.n	8004264 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3301      	adds	r3, #1
 8004266:	f003 021f 	and.w	r2, r3, #31
 800426a:	4613      	mov	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4413      	add	r3, r2
 8004270:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004272:	430b      	orrs	r3, r1
 8004274:	e081      	b.n	800437a <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427e:	2b00      	cmp	r3, #0
 8004280:	d107      	bne.n	8004292 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	0e9b      	lsrs	r3, r3, #26
 8004288:	3301      	adds	r3, #1
 800428a:	069b      	lsls	r3, r3, #26
 800428c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004290:	e015      	b.n	80042be <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80042aa:	2320      	movs	r3, #32
 80042ac:	e003      	b.n	80042b6 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	069b      	lsls	r3, r3, #26
 80042ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_ADCEx_InjectedConfigChannel+0x806>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0e9b      	lsrs	r3, r3, #26
 80042d0:	3301      	adds	r3, #1
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	e017      	b.n	800430e <HAL_ADCEx_InjectedConfigChannel+0x836>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	61bb      	str	r3, [r7, #24]
  return result;
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80042f6:	2320      	movs	r3, #32
 80042f8:	e003      	b.n	8004302 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	fab3 f383 	clz	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3301      	adds	r3, #1
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	ea42 0103 	orr.w	r1, r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <HAL_ADCEx_InjectedConfigChannel+0x862>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	3301      	adds	r3, #1
 8004326:	f003 021f 	and.w	r2, r3, #31
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	3b1e      	subs	r3, #30
 8004332:	051b      	lsls	r3, r3, #20
 8004334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004338:	e01e      	b.n	8004378 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	60fb      	str	r3, [r7, #12]
  return result;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 8004352:	2320      	movs	r3, #32
 8004354:	e006      	b.n	8004364 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8004356:	bf00      	nop
 8004358:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	3301      	adds	r3, #1
 8004366:	f003 021f 	and.w	r2, r3, #31
 800436a:	4613      	mov	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4413      	add	r3, r2
 8004370:	3b1e      	subs	r3, #30
 8004372:	051b      	lsls	r3, r3, #20
 8004374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004378:	430b      	orrs	r3, r1
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	6892      	ldr	r2, [r2, #8]
 800437e:	4619      	mov	r1, r3
 8004380:	f7ff f80a 	bl	8003398 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b3a      	ldr	r3, [pc, #232]	; (8004474 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d067      	beq.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004390:	4839      	ldr	r0, [pc, #228]	; (8004478 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8004392:	f7fe ff21 	bl	80031d8 <LL_ADC_GetCommonPathInternalCh>
 8004396:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a37      	ldr	r2, [pc, #220]	; (800447c <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a35      	ldr	r2, [pc, #212]	; (8004480 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d127      	bne.n	80043fe <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d121      	bne.n	80043fe <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c2:	d14d      	bne.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043cc:	4619      	mov	r1, r3
 80043ce:	482a      	ldr	r0, [pc, #168]	; (8004478 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80043d0:	f7fe feef 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	099b      	lsrs	r3, r3, #6
 80043da:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	099a      	lsrs	r2, r3, #6
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3318      	adds	r3, #24
 80043ec:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80043ee:	e002      	b.n	80043f6 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f9      	bne.n	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043fc:	e030      	b.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a22      	ldr	r2, [pc, #136]	; (800448c <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d113      	bne.n	8004430 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800440c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10d      	bne.n	8004430 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d020      	beq.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800441e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004426:	4619      	mov	r1, r3
 8004428:	4813      	ldr	r0, [pc, #76]	; (8004478 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800442a:	f7fe fec2 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800442e:	e017      	b.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d112      	bne.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800443a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10c      	bne.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a11      	ldr	r2, [pc, #68]	; (8004490 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004458:	4619      	mov	r1, r3
 800445a:	4807      	ldr	r0, [pc, #28]	; (8004478 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800445c:	f7fe fea9 	bl	80031b2 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004468:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800446c:	4618      	mov	r0, r3
 800446e:	37d8      	adds	r7, #216	; 0xd8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	80080000 	.word	0x80080000
 8004478:	50000300 	.word	0x50000300
 800447c:	c3210000 	.word	0xc3210000
 8004480:	90c00010 	.word	0x90c00010
 8004484:	20000008 	.word	0x20000008
 8004488:	053e2d63 	.word	0x053e2d63
 800448c:	c7520000 	.word	0xc7520000
 8004490:	50000100 	.word	0x50000100
 8004494:	cb840000 	.word	0xcb840000

08004498 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b0a1      	sub	sp, #132	; 0x84
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e08b      	b.n	80045ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044be:	2300      	movs	r3, #0
 80044c0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80044c2:	2300      	movs	r3, #0
 80044c4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ce:	d102      	bne.n	80044d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044d0:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	e001      	b.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e06a      	b.n	80045ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff f802 	bl	8003504 <LL_ADC_REG_IsConversionOngoing>
 8004500:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fffc 	bl	8003504 <LL_ADC_REG_IsConversionOngoing>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d14c      	bne.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004514:	2b00      	cmp	r3, #0
 8004516:	d149      	bne.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004518:	4b30      	ldr	r3, [pc, #192]	; (80045dc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800451a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d028      	beq.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004536:	035b      	lsls	r3, r3, #13
 8004538:	430b      	orrs	r3, r1
 800453a:	431a      	orrs	r2, r3
 800453c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004540:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004544:	f7fe ff8a 	bl	800345c <LL_ADC_IsEnabled>
 8004548:	4604      	mov	r4, r0
 800454a:	4823      	ldr	r0, [pc, #140]	; (80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800454c:	f7fe ff86 	bl	800345c <LL_ADC_IsEnabled>
 8004550:	4603      	mov	r3, r0
 8004552:	4323      	orrs	r3, r4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d133      	bne.n	80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004560:	f023 030f 	bic.w	r3, r3, #15
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	6811      	ldr	r1, [r2, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	6892      	ldr	r2, [r2, #8]
 800456c:	430a      	orrs	r2, r1
 800456e:	431a      	orrs	r2, r3
 8004570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004572:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004574:	e024      	b.n	80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004582:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004586:	f7fe ff69 	bl	800345c <LL_ADC_IsEnabled>
 800458a:	4604      	mov	r4, r0
 800458c:	4812      	ldr	r0, [pc, #72]	; (80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800458e:	f7fe ff65 	bl	800345c <LL_ADC_IsEnabled>
 8004592:	4603      	mov	r3, r0
 8004594:	4323      	orrs	r3, r4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d112      	bne.n	80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800459a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045a2:	f023 030f 	bic.w	r3, r3, #15
 80045a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045aa:	e009      	b.n	80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045be:	e000      	b.n	80045c2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3784      	adds	r7, #132	; 0x84
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd90      	pop	{r4, r7, pc}
 80045d6:	bf00      	nop
 80045d8:	50000100 	.word	0x50000100
 80045dc:	50000300 	.word	0x50000300

080045e0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <LL_EXTI_EnableIT_0_31+0x20>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4904      	ldr	r1, [pc, #16]	; (8004600 <LL_EXTI_EnableIT_0_31+0x20>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40010400 	.word	0x40010400

08004604 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <LL_EXTI_DisableIT_0_31+0x24>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	43db      	mvns	r3, r3
 8004614:	4904      	ldr	r1, [pc, #16]	; (8004628 <LL_EXTI_DisableIT_0_31+0x24>)
 8004616:	4013      	ands	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010400 	.word	0x40010400

0800462c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4904      	ldr	r1, [pc, #16]	; (800464c <LL_EXTI_EnableEvent_0_31+0x20>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]

}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	40010400 	.word	0x40010400

08004650 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <LL_EXTI_DisableEvent_0_31+0x24>)
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	43db      	mvns	r3, r3
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004662:	4013      	ands	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40010400 	.word	0x40010400

08004678 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	4904      	ldr	r1, [pc, #16]	; (8004698 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]

}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40010400 	.word	0x40010400

0800469c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	4904      	ldr	r1, [pc, #16]	; (80046c0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]

}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010400 	.word	0x40010400

080046c4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	4904      	ldr	r1, [pc, #16]	; (80046e4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60cb      	str	r3, [r1, #12]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40010400 	.word	0x40010400

080046e8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	4904      	ldr	r1, [pc, #16]	; (800470c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	60cb      	str	r3, [r1, #12]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010400 	.word	0x40010400

08004710 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004718:	4a04      	ldr	r2, [pc, #16]	; (800472c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6153      	str	r3, [r2, #20]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010400 	.word	0x40010400

08004730 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e0bc      	b.n	80048c6 <HAL_COMP_Init+0x196>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800475a:	d102      	bne.n	8004762 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e0b1      	b.n	80048c6 <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	7f5b      	ldrb	r3, [r3, #29]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fd f933 	bl	80019e4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004788:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b48      	ldr	r3, [pc, #288]	; (80048d0 <HAL_COMP_Init+0x1a0>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	6979      	ldr	r1, [r7, #20]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_COMP_Init+0xc8>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d113      	bne.n	80047f8 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047d0:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_COMP_Init+0x1a4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	099b      	lsrs	r3, r3, #6
 80047d6:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <HAL_COMP_Init+0x1a8>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80047ea:	e002      	b.n	80047f2 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f9      	bne.n	80047ec <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a37      	ldr	r2, [pc, #220]	; (80048dc <HAL_COMP_Init+0x1ac>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d012      	beq.n	8004828 <HAL_COMP_Init+0xf8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a36      	ldr	r2, [pc, #216]	; (80048e0 <HAL_COMP_Init+0x1b0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00a      	beq.n	8004822 <HAL_COMP_Init+0xf2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a34      	ldr	r2, [pc, #208]	; (80048e4 <HAL_COMP_Init+0x1b4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d102      	bne.n	800481c <HAL_COMP_Init+0xec>
 8004816:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800481a:	e007      	b.n	800482c <HAL_COMP_Init+0xfc>
 800481c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004820:	e004      	b.n	800482c <HAL_COMP_Init+0xfc>
 8004822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004826:	e001      	b.n	800482c <HAL_COMP_Init+0xfc>
 8004828:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800482c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d037      	beq.n	80048aa <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004846:	6938      	ldr	r0, [r7, #16]
 8004848:	f7ff ff16 	bl	8004678 <LL_EXTI_EnableRisingTrig_0_31>
 800484c:	e002      	b.n	8004854 <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	f7ff ff24 	bl	800469c <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004860:	6938      	ldr	r0, [r7, #16]
 8004862:	f7ff ff2f 	bl	80046c4 <LL_EXTI_EnableFallingTrig_0_31>
 8004866:	e002      	b.n	800486e <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004868:	6938      	ldr	r0, [r7, #16]
 800486a:	f7ff ff3d 	bl	80046e8 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 800486e:	6938      	ldr	r0, [r7, #16]
 8004870:	f7ff ff4e 	bl	8004710 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004880:	6938      	ldr	r0, [r7, #16]
 8004882:	f7ff fed3 	bl	800462c <LL_EXTI_EnableEvent_0_31>
 8004886:	e002      	b.n	800488e <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004888:	6938      	ldr	r0, [r7, #16]
 800488a:	f7ff fee1 	bl	8004650 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 800489a:	6938      	ldr	r0, [r7, #16]
 800489c:	f7ff fea0 	bl	80045e0 <LL_EXTI_EnableIT_0_31>
 80048a0:	e009      	b.n	80048b6 <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 80048a2:	6938      	ldr	r0, [r7, #16]
 80048a4:	f7ff feae 	bl	8004604 <LL_EXTI_DisableIT_0_31>
 80048a8:	e005      	b.n	80048b6 <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 80048aa:	6938      	ldr	r0, [r7, #16]
 80048ac:	f7ff fed0 	bl	8004650 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 80048b0:	6938      	ldr	r0, [r7, #16]
 80048b2:	f7ff fea7 	bl	8004604 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7f5b      	ldrb	r3, [r3, #29]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	ff007e0f 	.word	0xff007e0f
 80048d4:	20000008 	.word	0x20000008
 80048d8:	053e2d63 	.word	0x053e2d63
 80048dc:	40010200 	.word	0x40010200
 80048e0:	40010204 	.word	0x40010204
 80048e4:	40010208 	.word	0x40010208

080048e8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
 8004902:	e02e      	b.n	8004962 <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800490e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004912:	d102      	bne.n	800491a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e023      	b.n	8004962 <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7f5b      	ldrb	r3, [r3, #29]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d11c      	bne.n	800495e <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <HAL_COMP_Start+0x88>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <HAL_COMP_Start+0x8c>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	0cda      	lsrs	r2, r3, #19
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800494e:	e002      	b.n	8004956 <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3b01      	subs	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f9      	bne.n	8004950 <HAL_COMP_Start+0x68>
 800495c:	e001      	b.n	8004962 <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	20000008 	.word	0x20000008
 8004974:	431bde83 	.word	0x431bde83

08004978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <__NVIC_SetPriorityGrouping+0x44>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004994:	4013      	ands	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049aa:	4a04      	ldr	r2, [pc, #16]	; (80049bc <__NVIC_SetPriorityGrouping+0x44>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	60d3      	str	r3, [r2, #12]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <__NVIC_GetPriorityGrouping+0x18>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	f003 0307 	and.w	r3, r3, #7
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	db0b      	blt.n	8004a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	f003 021f 	and.w	r2, r3, #31
 80049f4:	4907      	ldr	r1, [pc, #28]	; (8004a14 <__NVIC_EnableIRQ+0x38>)
 80049f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2001      	movs	r0, #1
 80049fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	e000e100 	.word	0xe000e100

08004a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	db0a      	blt.n	8004a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	490c      	ldr	r1, [pc, #48]	; (8004a64 <__NVIC_SetPriority+0x4c>)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a40:	e00a      	b.n	8004a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4908      	ldr	r1, [pc, #32]	; (8004a68 <__NVIC_SetPriority+0x50>)
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	0112      	lsls	r2, r2, #4
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	440b      	add	r3, r1
 8004a56:	761a      	strb	r2, [r3, #24]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000e100 	.word	0xe000e100
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b089      	sub	sp, #36	; 0x24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f1c3 0307 	rsb	r3, r3, #7
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	bf28      	it	cs
 8004a8a:	2304      	movcs	r3, #4
 8004a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2b06      	cmp	r3, #6
 8004a94:	d902      	bls.n	8004a9c <NVIC_EncodePriority+0x30>
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3b03      	subs	r3, #3
 8004a9a:	e000      	b.n	8004a9e <NVIC_EncodePriority+0x32>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	43da      	mvns	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	401a      	ands	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	43d9      	mvns	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	4313      	orrs	r3, r2
         );
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3724      	adds	r7, #36	; 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae4:	d301      	bcc.n	8004aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e00f      	b.n	8004b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <SysTick_Config+0x40>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004af2:	210f      	movs	r1, #15
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	f7ff ff8e 	bl	8004a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <SysTick_Config+0x40>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <SysTick_Config+0x40>)
 8004b04:	2207      	movs	r2, #7
 8004b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	e000e010 	.word	0xe000e010

08004b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff ff29 	bl	8004978 <__NVIC_SetPriorityGrouping>
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	4603      	mov	r3, r0
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b3c:	f7ff ff40 	bl	80049c0 <__NVIC_GetPriorityGrouping>
 8004b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7ff ff90 	bl	8004a6c <NVIC_EncodePriority>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b52:	4611      	mov	r1, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ff5f 	bl	8004a18 <__NVIC_SetPriority>
}
 8004b5a:	bf00      	nop
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	4603      	mov	r3, r0
 8004b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff ff33 	bl	80049dc <__NVIC_EnableIRQ>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff ffa4 	bl	8004ad4 <SysTick_Config>
 8004b8c:	4603      	mov	r3, r0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e014      	b.n	8004bd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	791b      	ldrb	r3, [r3, #4]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fc ff89 	bl	8001ad0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	795b      	ldrb	r3, [r3, #5]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_DAC_ConfigChannel+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e192      	b.n	8004f1a <HAL_DAC_ConfigChannel+0x33e>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d174      	bne.n	8004cf2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c08:	f7fd f992 	bl	8001f30 <HAL_GetTick>
 8004c0c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d134      	bne.n	8004c7e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c14:	e011      	b.n	8004c3a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c16:	f7fd f98b 	bl	8001f30 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d90a      	bls.n	8004c3a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f043 0208 	orr.w	r2, r3, #8
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2203      	movs	r2, #3
 8004c34:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e16f      	b.n	8004f1a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e6      	bne.n	8004c16 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004c48:	2001      	movs	r0, #1
 8004c4a:	f7fd f97d 	bl	8001f48 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
 8004c58:	e01e      	b.n	8004c98 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c5a:	f7fd f969 	bl	8001f30 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d90a      	bls.n	8004c7e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f043 0208 	orr.w	r2, r3, #8
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2203      	movs	r2, #3
 8004c78:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e14d      	b.n	8004f1a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	dbe8      	blt.n	8004c5a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f7fd f95d 	bl	8001f48 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	ea02 0103 	and.w	r1, r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	21ff      	movs	r1, #255	; 0xff
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	ea02 0103 	and.w	r1, r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d11d      	bne.n	8004d36 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	221f      	movs	r2, #31
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	4013      	ands	r3, r2
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2207      	movs	r2, #7
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4e:	4013      	ands	r3, r2
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d102      	bne.n	8004d60 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	e00f      	b.n	8004d80 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d102      	bne.n	8004d6e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	623b      	str	r3, [r7, #32]
 8004d6c:	e008      	b.n	8004d80 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004d76:	2301      	movs	r3, #1
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	e001      	b.n	8004d80 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da2:	4013      	ands	r3, r2
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d102      	bne.n	8004db4 <HAL_DAC_ConfigChannel+0x1d8>
 8004dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004db2:	e000      	b.n	8004db6 <HAL_DAC_ConfigChannel+0x1da>
 8004db4:	2300      	movs	r3, #0
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	4013      	ands	r3, r2
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	795b      	ldrb	r3, [r3, #5]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d102      	bne.n	8004de0 <HAL_DAC_ConfigChannel+0x204>
 8004dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dde:	e000      	b.n	8004de2 <HAL_DAC_ConfigChannel+0x206>
 8004de0:	2300      	movs	r3, #0
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d114      	bne.n	8004e22 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004df8:	f001 fa7c 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8004dfc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	4a48      	ldr	r2, [pc, #288]	; (8004f24 <HAL_DAC_ConfigChannel+0x348>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d904      	bls.n	8004e10 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0e:	e00f      	b.n	8004e30 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4a45      	ldr	r2, [pc, #276]	; (8004f28 <HAL_DAC_ConfigChannel+0x34c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d90a      	bls.n	8004e2e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	e006      	b.n	8004e30 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	e000      	b.n	8004e30 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004e2e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43da      	mvns	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	400a      	ands	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	4013      	ands	r3, r2
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	22c0      	movs	r2, #192	; 0xc0
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	ea02 0103 	and.w	r1, r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	409a      	lsls	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	09896800 	.word	0x09896800
 8004f28:	04c4b400 	.word	0x04c4b400

08004f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e08d      	b.n	800505a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_DMA_Init+0x138>)
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d80f      	bhi.n	8004f6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4b45      	ldr	r3, [pc, #276]	; (8005068 <HAL_DMA_Init+0x13c>)
 8004f52:	4413      	add	r3, r2
 8004f54:	4a45      	ldr	r2, [pc, #276]	; (800506c <HAL_DMA_Init+0x140>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	009a      	lsls	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a42      	ldr	r2, [pc, #264]	; (8005070 <HAL_DMA_Init+0x144>)
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
 8004f68:	e00e      	b.n	8004f88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4b40      	ldr	r3, [pc, #256]	; (8005074 <HAL_DMA_Init+0x148>)
 8004f72:	4413      	add	r3, r2
 8004f74:	4a3d      	ldr	r2, [pc, #244]	; (800506c <HAL_DMA_Init+0x140>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	009a      	lsls	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a3c      	ldr	r2, [pc, #240]	; (8005078 <HAL_DMA_Init+0x14c>)
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f908 	bl	80051f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe8:	d102      	bne.n	8004ff0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005004:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d010      	beq.n	8005030 <HAL_DMA_Init+0x104>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b04      	cmp	r3, #4
 8005014:	d80c      	bhi.n	8005030 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f928 	bl	800526c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	e008      	b.n	8005042 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40020407 	.word	0x40020407
 8005068:	bffdfff8 	.word	0xbffdfff8
 800506c:	cccccccd 	.word	0xcccccccd
 8005070:	40020000 	.word	0x40020000
 8005074:	bffdfbf8 	.word	0xbffdfbf8
 8005078:	40020400 	.word	0x40020400

0800507c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_DMA_Start_IT+0x20>
 8005098:	2302      	movs	r3, #2
 800509a:	e066      	b.n	800516a <HAL_DMA_Start_IT+0xee>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d155      	bne.n	800515c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f84c 	bl	8005172 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 020e 	orr.w	r2, r2, #14
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e00f      	b.n	8005114 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 020a 	orr.w	r2, r2, #10
 8005112:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005130:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005148:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e005      	b.n	8005168 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005164:	2302      	movs	r3, #2
 8005166:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005168:	7dfb      	ldrb	r3, [r7, #23]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005188:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	f003 021f 	and.w	r2, r3, #31
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f202 	lsl.w	r2, r1, r2
 80051ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d108      	bne.n	80051d2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051d0:	e007      	b.n	80051e2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005200:	429a      	cmp	r2, r3
 8005202:	d802      	bhi.n	800520a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e001      	b.n	800520e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800520c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	3b08      	subs	r3, #8
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	009a      	lsls	r2, r3, #2
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	461a      	mov	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a0b      	ldr	r2, [pc, #44]	; (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800523a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	651a      	str	r2, [r3, #80]	; 0x50
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40020407 	.word	0x40020407
 800525c:	40020800 	.word	0x40020800
 8005260:	40020820 	.word	0x40020820
 8005264:	cccccccd 	.word	0xcccccccd
 8005268:	40020880 	.word	0x40020880

0800526c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800528e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3b01      	subs	r3, #1
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	1000823f 	.word	0x1000823f
 80052b0:	40020940 	.word	0x40020940

080052b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052c2:	e15a      	b.n	800557a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	2101      	movs	r1, #1
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 814c 	beq.w	8005574 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d005      	beq.n	80052f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d130      	bne.n	8005356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	2203      	movs	r2, #3
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800532a:	2201      	movs	r2, #1
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	f003 0201 	and.w	r2, r3, #1
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b03      	cmp	r3, #3
 8005360:	d017      	beq.n	8005392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	2203      	movs	r2, #3
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4013      	ands	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d123      	bne.n	80053e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	08da      	lsrs	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3208      	adds	r2, #8
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	220f      	movs	r2, #15
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	08da      	lsrs	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3208      	adds	r2, #8
 80053e0:	6939      	ldr	r1, [r7, #16]
 80053e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	2203      	movs	r2, #3
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4013      	ands	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0203 	and.w	r2, r3, #3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80a6 	beq.w	8005574 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005428:	4b5b      	ldr	r3, [pc, #364]	; (8005598 <HAL_GPIO_Init+0x2e4>)
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	4a5a      	ldr	r2, [pc, #360]	; (8005598 <HAL_GPIO_Init+0x2e4>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6613      	str	r3, [r2, #96]	; 0x60
 8005434:	4b58      	ldr	r3, [pc, #352]	; (8005598 <HAL_GPIO_Init+0x2e4>)
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005440:	4a56      	ldr	r2, [pc, #344]	; (800559c <HAL_GPIO_Init+0x2e8>)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	3302      	adds	r3, #2
 8005448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	220f      	movs	r2, #15
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4013      	ands	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800546a:	d01f      	beq.n	80054ac <HAL_GPIO_Init+0x1f8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a4c      	ldr	r2, [pc, #304]	; (80055a0 <HAL_GPIO_Init+0x2ec>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d019      	beq.n	80054a8 <HAL_GPIO_Init+0x1f4>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a4b      	ldr	r2, [pc, #300]	; (80055a4 <HAL_GPIO_Init+0x2f0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <HAL_GPIO_Init+0x1f0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a4a      	ldr	r2, [pc, #296]	; (80055a8 <HAL_GPIO_Init+0x2f4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00d      	beq.n	80054a0 <HAL_GPIO_Init+0x1ec>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a49      	ldr	r2, [pc, #292]	; (80055ac <HAL_GPIO_Init+0x2f8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <HAL_GPIO_Init+0x1e8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a48      	ldr	r2, [pc, #288]	; (80055b0 <HAL_GPIO_Init+0x2fc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d101      	bne.n	8005498 <HAL_GPIO_Init+0x1e4>
 8005494:	2305      	movs	r3, #5
 8005496:	e00a      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 8005498:	2306      	movs	r3, #6
 800549a:	e008      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 800549c:	2304      	movs	r3, #4
 800549e:	e006      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054a0:	2303      	movs	r3, #3
 80054a2:	e004      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e002      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_GPIO_Init+0x1fa>
 80054ac:	2300      	movs	r3, #0
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	f002 0203 	and.w	r2, r2, #3
 80054b4:	0092      	lsls	r2, r2, #2
 80054b6:	4093      	lsls	r3, r2
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054be:	4937      	ldr	r1, [pc, #220]	; (800559c <HAL_GPIO_Init+0x2e8>)
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	3302      	adds	r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054cc:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <HAL_GPIO_Init+0x300>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4013      	ands	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054f0:	4a30      	ldr	r2, [pc, #192]	; (80055b4 <HAL_GPIO_Init+0x300>)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <HAL_GPIO_Init+0x300>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	43db      	mvns	r3, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4013      	ands	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <HAL_GPIO_Init+0x300>)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005520:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <HAL_GPIO_Init+0x300>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	43db      	mvns	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005544:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_GPIO_Init+0x300>)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800554a:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <HAL_GPIO_Init+0x300>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	43db      	mvns	r3, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800556e:	4a11      	ldr	r2, [pc, #68]	; (80055b4 <HAL_GPIO_Init+0x300>)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	3301      	adds	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f ae9d 	bne.w	80052c4 <HAL_GPIO_Init+0x10>
  }
}
 800558a:	bf00      	nop
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40021000 	.word	0x40021000
 800559c:	40010000 	.word	0x40010000
 80055a0:	48000400 	.word	0x48000400
 80055a4:	48000800 	.word	0x48000800
 80055a8:	48000c00 	.word	0x48000c00
 80055ac:	48001000 	.word	0x48001000
 80055b0:	48001400 	.word	0x48001400
 80055b4:	40010400 	.word	0x40010400

080055b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
 80055c4:	4613      	mov	r3, r2
 80055c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055c8:	787b      	ldrb	r3, [r7, #1]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055d4:	e002      	b.n	80055dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055d6:	887a      	ldrh	r2, [r7, #2]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4013      	ands	r3, r2
 8005600:	041a      	lsls	r2, r3, #16
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	43d9      	mvns	r1, r3
 8005606:	887b      	ldrh	r3, [r7, #2]
 8005608:	400b      	ands	r3, r1
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	619a      	str	r2, [r3, #24]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e0bb      	b.n	80057aa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b05      	cmp	r3, #5
 800563c:	d101      	bne.n	8005642 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e0b3      	b.n	80057aa <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d101      	bne.n	8005652 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0ab      	b.n	80057aa <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005652:	4b58      	ldr	r3, [pc, #352]	; (80057b4 <HAL_OPAMP_Init+0x198>)
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	4a57      	ldr	r2, [pc, #348]	; (80057b4 <HAL_OPAMP_Init+0x198>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6613      	str	r3, [r2, #96]	; 0x60
 800565e:	4b55      	ldr	r3, [pc, #340]	; (80057b4 <HAL_OPAMP_Init+0x198>)
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc fa46 	bl	8001b10 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d003      	beq.n	8005694 <HAL_OPAMP_Init+0x78>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b60      	cmp	r3, #96	; 0x60
 8005692:	d133      	bne.n	80056fc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 0110 	bic.w	r1, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <HAL_OPAMP_Init+0x19c>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6851      	ldr	r1, [r2, #4]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6892      	ldr	r2, [r2, #8]
 80056bc:	4311      	orrs	r1, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6912      	ldr	r2, [r2, #16]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	7d09      	ldrb	r1, [r1, #20]
 80056c8:	2901      	cmp	r1, #1
 80056ca:	d102      	bne.n	80056d2 <HAL_OPAMP_Init+0xb6>
 80056cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056d0:	e000      	b.n	80056d4 <HAL_OPAMP_Init+0xb8>
 80056d2:	2100      	movs	r1, #0
 80056d4:	4311      	orrs	r1, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056e6:	04d2      	lsls	r2, r2, #19
 80056e8:	4311      	orrs	r1, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056ee:	0612      	lsls	r2, r2, #24
 80056f0:	4311      	orrs	r1, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	430b      	orrs	r3, r1
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e035      	b.n	8005768 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 0110 	bic.w	r1, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <HAL_OPAMP_Init+0x19c>)
 800571a:	4013      	ands	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6851      	ldr	r1, [r2, #4]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6892      	ldr	r2, [r2, #8]
 8005724:	4311      	orrs	r1, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68d2      	ldr	r2, [r2, #12]
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6912      	ldr	r2, [r2, #16]
 8005730:	430a      	orrs	r2, r1
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	7d09      	ldrb	r1, [r1, #20]
 8005736:	2901      	cmp	r1, #1
 8005738:	d102      	bne.n	8005740 <HAL_OPAMP_Init+0x124>
 800573a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800573e:	e000      	b.n	8005742 <HAL_OPAMP_Init+0x126>
 8005740:	2100      	movs	r1, #0
 8005742:	4311      	orrs	r1, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800574e:	4311      	orrs	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005754:	04d2      	lsls	r2, r2, #19
 8005756:	4311      	orrs	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800575c:	0612      	lsls	r2, r2, #24
 800575e:	4311      	orrs	r1, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	430b      	orrs	r3, r1
 8005766:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	db10      	blt.n	8005794 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d103      	bne.n	80057a8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000
 80057b8:	e0003e11 	.word	0xe0003e11

080057bc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	73fb      	strb	r3, [r7, #15]
 80057d2:	e01d      	b.n	8005810 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b05      	cmp	r3, #5
 80057de:	d102      	bne.n	80057e6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	e014      	b.n	8005810 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d10c      	bne.n	800580c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800580a:	e001      	b.n	8005810 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d141      	bne.n	80058b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800582e:	4b4b      	ldr	r3, [pc, #300]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583a:	d131      	bne.n	80058a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800583c:	4b47      	ldr	r3, [pc, #284]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005842:	4a46      	ldr	r2, [pc, #280]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800584c:	4b43      	ldr	r3, [pc, #268]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005854:	4a41      	ldr	r2, [pc, #260]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800585a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800585c:	4b40      	ldr	r3, [pc, #256]	; (8005960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2232      	movs	r2, #50	; 0x32
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	4a3f      	ldr	r2, [pc, #252]	; (8005964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	0c9b      	lsrs	r3, r3, #18
 800586e:	3301      	adds	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005872:	e002      	b.n	800587a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3b01      	subs	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800587a:	4b38      	ldr	r3, [pc, #224]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005886:	d102      	bne.n	800588e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f2      	bne.n	8005874 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800588e:	4b33      	ldr	r3, [pc, #204]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589a:	d158      	bne.n	800594e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e057      	b.n	8005950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058a0:	4b2e      	ldr	r3, [pc, #184]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a6:	4a2d      	ldr	r2, [pc, #180]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058b0:	e04d      	b.n	800594e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b8:	d141      	bne.n	800593e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ba:	4b28      	ldr	r3, [pc, #160]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c6:	d131      	bne.n	800592c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c8:	4b24      	ldr	r3, [pc, #144]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ce:	4a23      	ldr	r2, [pc, #140]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058d8:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058e0:	4a1e      	ldr	r2, [pc, #120]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2232      	movs	r2, #50	; 0x32
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	0c9b      	lsrs	r3, r3, #18
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fe:	e002      	b.n	8005906 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b01      	subs	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005912:	d102      	bne.n	800591a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f2      	bne.n	8005900 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005926:	d112      	bne.n	800594e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e011      	b.n	8005950 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800593c:	e007      	b.n	800594e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005946:	4a05      	ldr	r2, [pc, #20]	; (800595c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800594c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40007000 	.word	0x40007000
 8005960:	20000008 	.word	0x20000008
 8005964:	431bde83 	.word	0x431bde83

08005968 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800596c:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4a04      	ldr	r2, [pc, #16]	; (8005984 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005976:	6093      	str	r3, [r2, #8]
}
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40007000 	.word	0x40007000

08005988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e308      	b.n	8005fac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d075      	beq.n	8005a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a6:	4ba3      	ldr	r3, [pc, #652]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b0:	4ba0      	ldr	r3, [pc, #640]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0303 	and.w	r3, r3, #3
 80059b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b0c      	cmp	r3, #12
 80059be:	d102      	bne.n	80059c6 <HAL_RCC_OscConfig+0x3e>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d002      	beq.n	80059cc <HAL_RCC_OscConfig+0x44>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	4b99      	ldr	r3, [pc, #612]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d05b      	beq.n	8005a90 <HAL_RCC_OscConfig+0x108>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d157      	bne.n	8005a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e2e3      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ec:	d106      	bne.n	80059fc <HAL_RCC_OscConfig+0x74>
 80059ee:	4b91      	ldr	r3, [pc, #580]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a90      	ldr	r2, [pc, #576]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e01d      	b.n	8005a38 <HAL_RCC_OscConfig+0xb0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x98>
 8005a06:	4b8b      	ldr	r3, [pc, #556]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a8a      	ldr	r2, [pc, #552]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b88      	ldr	r3, [pc, #544]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a87      	ldr	r2, [pc, #540]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e00b      	b.n	8005a38 <HAL_RCC_OscConfig+0xb0>
 8005a20:	4b84      	ldr	r3, [pc, #528]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a83      	ldr	r2, [pc, #524]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4b81      	ldr	r3, [pc, #516]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a80      	ldr	r2, [pc, #512]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d013      	beq.n	8005a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fc fa76 	bl	8001f30 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fc fa72 	bl	8001f30 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e2a8      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a5a:	4b76      	ldr	r3, [pc, #472]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0xc0>
 8005a66:	e014      	b.n	8005a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fc fa62 	bl	8001f30 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a70:	f7fc fa5e 	bl	8001f30 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b64      	cmp	r3, #100	; 0x64
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e294      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a82:	4b6c      	ldr	r3, [pc, #432]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0xe8>
 8005a8e:	e000      	b.n	8005a92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d075      	beq.n	8005b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa8:	4b62      	ldr	r3, [pc, #392]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b0c      	cmp	r3, #12
 8005ab6:	d102      	bne.n	8005abe <HAL_RCC_OscConfig+0x136>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d002      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x13c>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d11f      	bne.n	8005b04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac4:	4b5b      	ldr	r3, [pc, #364]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_RCC_OscConfig+0x154>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e267      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005adc:	4b55      	ldr	r3, [pc, #340]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	061b      	lsls	r3, r3, #24
 8005aea:	4952      	ldr	r1, [pc, #328]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005af0:	4b51      	ldr	r3, [pc, #324]	; (8005c38 <HAL_RCC_OscConfig+0x2b0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fc f9cf 	bl	8001e98 <HAL_InitTick>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d043      	beq.n	8005b88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e253      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d023      	beq.n	8005b54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b0c:	4b49      	ldr	r3, [pc, #292]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a48      	ldr	r2, [pc, #288]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b18:	f7fc fa0a 	bl	8001f30 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b20:	f7fc fa06 	bl	8001f30 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e23c      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b32:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3e:	4b3d      	ldr	r3, [pc, #244]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	4939      	ldr	r1, [pc, #228]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	604b      	str	r3, [r1, #4]
 8005b52:	e01a      	b.n	8005b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b54:	4b37      	ldr	r3, [pc, #220]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a36      	ldr	r2, [pc, #216]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fc f9e6 	bl	8001f30 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b68:	f7fc f9e2 	bl	8001f30 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e218      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x1e0>
 8005b86:	e000      	b.n	8005b8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d03c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01c      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9e:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba4:	4a23      	ldr	r2, [pc, #140]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bae:	f7fc f9bf 	bl	8001f30 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb6:	f7fc f9bb 	bl	8001f30 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e1f1      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0ef      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x22e>
 8005bd6:	e01b      	b.n	8005c10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd8:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be8:	f7fc f9a2 	bl	8001f30 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf0:	f7fc f99e 	bl	8001f30 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e1d4      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c02:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ef      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80ab 	beq.w	8005d74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCC_OscConfig+0x2b4>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e005      	b.n	8005c3e <HAL_RCC_OscConfig+0x2b6>
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
 8005c38:	2000000c 	.word	0x2000000c
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c42:	4baf      	ldr	r3, [pc, #700]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	4aae      	ldr	r2, [pc, #696]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c4e:	4bac      	ldr	r3, [pc, #688]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c5e:	4ba9      	ldr	r3, [pc, #676]	; (8005f04 <HAL_RCC_OscConfig+0x57c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d118      	bne.n	8005c9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c6a:	4ba6      	ldr	r3, [pc, #664]	; (8005f04 <HAL_RCC_OscConfig+0x57c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4aa5      	ldr	r2, [pc, #660]	; (8005f04 <HAL_RCC_OscConfig+0x57c>)
 8005c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c76:	f7fc f95b 	bl	8001f30 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7e:	f7fc f957 	bl	8001f30 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e18d      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c90:	4b9c      	ldr	r3, [pc, #624]	; (8005f04 <HAL_RCC_OscConfig+0x57c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f0      	beq.n	8005c7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d108      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x32e>
 8005ca4:	4b96      	ldr	r3, [pc, #600]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005caa:	4a95      	ldr	r2, [pc, #596]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cb4:	e024      	b.n	8005d00 <HAL_RCC_OscConfig+0x378>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d110      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x358>
 8005cbe:	4b90      	ldr	r3, [pc, #576]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	4a8e      	ldr	r2, [pc, #568]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005cc6:	f043 0304 	orr.w	r3, r3, #4
 8005cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cce:	4b8c      	ldr	r3, [pc, #560]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	4a8a      	ldr	r2, [pc, #552]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cde:	e00f      	b.n	8005d00 <HAL_RCC_OscConfig+0x378>
 8005ce0:	4b87      	ldr	r3, [pc, #540]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	4a86      	ldr	r2, [pc, #536]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cf0:	4b83      	ldr	r3, [pc, #524]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	4a82      	ldr	r2, [pc, #520]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005cf8:	f023 0304 	bic.w	r3, r3, #4
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d016      	beq.n	8005d36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fc f912 	bl	8001f30 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d10:	f7fc f90e 	bl	8001f30 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e142      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d26:	4b76      	ldr	r3, [pc, #472]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0ed      	beq.n	8005d10 <HAL_RCC_OscConfig+0x388>
 8005d34:	e015      	b.n	8005d62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fc f8fb 	bl	8001f30 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d3c:	e00a      	b.n	8005d54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3e:	f7fc f8f7 	bl	8001f30 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e12b      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d54:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1ed      	bne.n	8005d3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d105      	bne.n	8005d74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d68:	4b65      	ldr	r3, [pc, #404]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6c:	4a64      	ldr	r2, [pc, #400]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d03c      	beq.n	8005dfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01c      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d88:	4b5d      	ldr	r3, [pc, #372]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d8e:	4a5c      	ldr	r2, [pc, #368]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d98:	f7fc f8ca 	bl	8001f30 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005da0:	f7fc f8c6 	bl	8001f30 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0fc      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005db2:	4b53      	ldr	r3, [pc, #332]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0ef      	beq.n	8005da0 <HAL_RCC_OscConfig+0x418>
 8005dc0:	e01b      	b.n	8005dfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dc2:	4b4f      	ldr	r3, [pc, #316]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dc8:	4a4d      	ldr	r2, [pc, #308]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd2:	f7fc f8ad 	bl	8001f30 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dda:	f7fc f8a9 	bl	8001f30 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e0df      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dec:	4b44      	ldr	r3, [pc, #272]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1ef      	bne.n	8005dda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80d3 	beq.w	8005faa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e04:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	2b0c      	cmp	r3, #12
 8005e0e:	f000 808d 	beq.w	8005f2c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d15a      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1a:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a38      	ldr	r2, [pc, #224]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e26:	f7fc f883 	bl	8001f30 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e2e:	f7fc f87f 	bl	8001f30 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e0b5      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e40:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e4c:	4b2c      	ldr	r3, [pc, #176]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	4b2d      	ldr	r3, [pc, #180]	; (8005f08 <HAL_RCC_OscConfig+0x580>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6a11      	ldr	r1, [r2, #32]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e5c:	3a01      	subs	r2, #1
 8005e5e:	0112      	lsls	r2, r2, #4
 8005e60:	4311      	orrs	r1, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005e66:	0212      	lsls	r2, r2, #8
 8005e68:	4311      	orrs	r1, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e6e:	0852      	lsrs	r2, r2, #1
 8005e70:	3a01      	subs	r2, #1
 8005e72:	0552      	lsls	r2, r2, #21
 8005e74:	4311      	orrs	r1, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e7a:	0852      	lsrs	r2, r2, #1
 8005e7c:	3a01      	subs	r2, #1
 8005e7e:	0652      	lsls	r2, r2, #25
 8005e80:	4311      	orrs	r1, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e86:	06d2      	lsls	r2, r2, #27
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	491d      	ldr	r1, [pc, #116]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e9c:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea8:	f7fc f842 	bl	8001f30 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb0:	f7fc f83e 	bl	8001f30 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e074      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x528>
 8005ece:	e06c      	b.n	8005faa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eda:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005edc:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a07      	ldr	r2, [pc, #28]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005ee2:	f023 0303 	bic.w	r3, r3, #3
 8005ee6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4a04      	ldr	r2, [pc, #16]	; (8005f00 <HAL_RCC_OscConfig+0x578>)
 8005eee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fc f81a 	bl	8001f30 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005efe:	e00e      	b.n	8005f1e <HAL_RCC_OscConfig+0x596>
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40007000 	.word	0x40007000
 8005f08:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0c:	f7fc f810 	bl	8001f30 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e046      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f1e:	4b25      	ldr	r3, [pc, #148]	; (8005fb4 <HAL_RCC_OscConfig+0x62c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x584>
 8005f2a:	e03e      	b.n	8005faa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e039      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f38:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <HAL_RCC_OscConfig+0x62c>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f003 0203 	and.w	r2, r3, #3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d12c      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	3b01      	subs	r3, #1
 8005f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d123      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d11b      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d113      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d109      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	085b      	lsrs	r3, r3, #1
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d001      	beq.n	8005faa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000

08005fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e11e      	b.n	800620e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd0:	4b91      	ldr	r3, [pc, #580]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d910      	bls.n	8006000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fde:	4b8e      	ldr	r3, [pc, #568]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 020f 	bic.w	r2, r3, #15
 8005fe6:	498c      	ldr	r1, [pc, #560]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	4b8a      	ldr	r3, [pc, #552]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e106      	b.n	800620e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d073      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d129      	bne.n	8006068 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006014:	4b81      	ldr	r3, [pc, #516]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0f4      	b.n	800620e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006024:	f000 f972 	bl	800630c <RCC_GetSysClockFreqFromPLLSource>
 8006028:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4a7c      	ldr	r2, [pc, #496]	; (8006220 <HAL_RCC_ClockConfig+0x268>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d93f      	bls.n	80060b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006032:	4b7a      	ldr	r3, [pc, #488]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006046:	2b00      	cmp	r3, #0
 8006048:	d033      	beq.n	80060b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800604e:	2b00      	cmp	r3, #0
 8006050:	d12f      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006052:	4b72      	ldr	r3, [pc, #456]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605a:	4a70      	ldr	r2, [pc, #448]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 800605c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006060:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e024      	b.n	80060b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d107      	bne.n	8006080 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006070:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0c6      	b.n	800620e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006080:	4b66      	ldr	r3, [pc, #408]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0be      	b.n	800620e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006090:	f000 f8ce 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 8006094:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4a61      	ldr	r2, [pc, #388]	; (8006220 <HAL_RCC_ClockConfig+0x268>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d909      	bls.n	80060b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800609e:	4b5f      	ldr	r3, [pc, #380]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a6:	4a5d      	ldr	r2, [pc, #372]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80060a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060b2:	4b5a      	ldr	r3, [pc, #360]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f023 0203 	bic.w	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4957      	ldr	r1, [pc, #348]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c4:	f7fb ff34 	bl	8001f30 <HAL_GetTick>
 80060c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060cc:	f7fb ff30 	bl	8001f30 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e095      	b.n	800620e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e2:	4b4e      	ldr	r3, [pc, #312]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 020c 	and.w	r2, r3, #12
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d1eb      	bne.n	80060cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d023      	beq.n	8006148 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800610c:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a42      	ldr	r2, [pc, #264]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006112:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006116:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006124:	4b3d      	ldr	r3, [pc, #244]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800612c:	4a3b      	ldr	r2, [pc, #236]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 800612e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006132:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006134:	4b39      	ldr	r3, [pc, #228]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4936      	ldr	r1, [pc, #216]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006142:	4313      	orrs	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	e008      	b.n	800615a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d105      	bne.n	800615a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800614e:	4b33      	ldr	r3, [pc, #204]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	4a32      	ldr	r2, [pc, #200]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 8006154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006158:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800615a:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d21d      	bcs.n	80061a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006168:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f023 020f 	bic.w	r2, r3, #15
 8006170:	4929      	ldr	r1, [pc, #164]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	4313      	orrs	r3, r2
 8006176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006178:	f7fb feda 	bl	8001f30 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	e00a      	b.n	8006196 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006180:	f7fb fed6 	bl	8001f30 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	; 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e03b      	b.n	800620e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006196:	4b20      	ldr	r3, [pc, #128]	; (8006218 <HAL_RCC_ClockConfig+0x260>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d1ed      	bne.n	8006180 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b0:	4b1a      	ldr	r3, [pc, #104]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	4917      	ldr	r1, [pc, #92]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	490f      	ldr	r1, [pc, #60]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061e2:	f000 f825 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 80061e6:	4602      	mov	r2, r0
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <HAL_RCC_ClockConfig+0x264>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	490c      	ldr	r1, [pc, #48]	; (8006224 <HAL_RCC_ClockConfig+0x26c>)
 80061f4:	5ccb      	ldrb	r3, [r1, r3]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	fa22 f303 	lsr.w	r3, r2, r3
 80061fe:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <HAL_RCC_ClockConfig+0x270>)
 8006200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <HAL_RCC_ClockConfig+0x274>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f7fb fe46 	bl	8001e98 <HAL_InitTick>
 800620c:	4603      	mov	r3, r0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40022000 	.word	0x40022000
 800621c:	40021000 	.word	0x40021000
 8006220:	04c4b400 	.word	0x04c4b400
 8006224:	0800883c 	.word	0x0800883c
 8006228:	20000008 	.word	0x20000008
 800622c:	2000000c 	.word	0x2000000c

08006230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006236:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b04      	cmp	r3, #4
 8006240:	d102      	bne.n	8006248 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006242:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	e047      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006248:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b08      	cmp	r3, #8
 8006252:	d102      	bne.n	800625a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006254:	4b26      	ldr	r3, [pc, #152]	; (80062f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	e03e      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800625a:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	2b0c      	cmp	r3, #12
 8006264:	d136      	bne.n	80062d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006270:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	3301      	adds	r3, #1
 800627c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d10c      	bne.n	800629e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006284:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	fbb2 f3f3 	udiv	r3, r2, r3
 800628c:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800628e:	68d2      	ldr	r2, [r2, #12]
 8006290:	0a12      	lsrs	r2, r2, #8
 8006292:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	617b      	str	r3, [r7, #20]
      break;
 800629c:	e00c      	b.n	80062b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800629e:	4a13      	ldr	r2, [pc, #76]	; (80062ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062a8:	68d2      	ldr	r2, [r2, #12]
 80062aa:	0a12      	lsrs	r2, r2, #8
 80062ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]
      break;
 80062b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062b8:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	0e5b      	lsrs	r3, r3, #25
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	3301      	adds	r3, #1
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e001      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062d8:	693b      	ldr	r3, [r7, #16]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	007a1200 	.word	0x007a1200

080062f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <HAL_RCC_GetHCLKFreq+0x14>)
 80062fa:	681b      	ldr	r3, [r3, #0]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20000008 	.word	0x20000008

0800630c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006312:	4b1e      	ldr	r3, [pc, #120]	; (800638c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800631c:	4b1b      	ldr	r3, [pc, #108]	; (800638c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b03      	cmp	r3, #3
 800632e:	d10c      	bne.n	800634a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006330:	4a17      	ldr	r2, [pc, #92]	; (8006390 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	4a14      	ldr	r2, [pc, #80]	; (800638c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800633a:	68d2      	ldr	r2, [r2, #12]
 800633c:	0a12      	lsrs	r2, r2, #8
 800633e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006342:	fb02 f303 	mul.w	r3, r2, r3
 8006346:	617b      	str	r3, [r7, #20]
    break;
 8006348:	e00c      	b.n	8006364 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006352:	4a0e      	ldr	r2, [pc, #56]	; (800638c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006354:	68d2      	ldr	r2, [r2, #12]
 8006356:	0a12      	lsrs	r2, r2, #8
 8006358:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800635c:	fb02 f303 	mul.w	r3, r2, r3
 8006360:	617b      	str	r3, [r7, #20]
    break;
 8006362:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	0e5b      	lsrs	r3, r3, #25
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	3301      	adds	r3, #1
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800637e:	687b      	ldr	r3, [r7, #4]
}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40021000 	.word	0x40021000
 8006390:	007a1200 	.word	0x007a1200
 8006394:	00f42400 	.word	0x00f42400

08006398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063a0:	2300      	movs	r3, #0
 80063a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063a4:	2300      	movs	r3, #0
 80063a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8098 	beq.w	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063b6:	2300      	movs	r3, #0
 80063b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ba:	4b43      	ldr	r3, [pc, #268]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10d      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063c6:	4b40      	ldr	r3, [pc, #256]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ca:	4a3f      	ldr	r2, [pc, #252]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d0:	6593      	str	r3, [r2, #88]	; 0x58
 80063d2:	4b3d      	ldr	r3, [pc, #244]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063da:	60bb      	str	r3, [r7, #8]
 80063dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063de:	2301      	movs	r3, #1
 80063e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063e2:	4b3a      	ldr	r3, [pc, #232]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a39      	ldr	r2, [pc, #228]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ee:	f7fb fd9f 	bl	8001f30 <HAL_GetTick>
 80063f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063f4:	e009      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f6:	f7fb fd9b 	bl	8001f30 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d902      	bls.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	74fb      	strb	r3, [r7, #19]
        break;
 8006408:	e005      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800640a:	4b30      	ldr	r3, [pc, #192]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0ef      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006416:	7cfb      	ldrb	r3, [r7, #19]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d159      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800641c:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006426:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01e      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	429a      	cmp	r2, r3
 8006436:	d019      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006438:	4b23      	ldr	r3, [pc, #140]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006444:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006454:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800645c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006464:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d016      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006476:	f7fb fd5b 	bl	8001f30 <HAL_GetTick>
 800647a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800647c:	e00b      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800647e:	f7fb fd57 	bl	8001f30 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	f241 3288 	movw	r2, #5000	; 0x1388
 800648c:	4293      	cmp	r3, r2
 800648e:	d902      	bls.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	74fb      	strb	r3, [r7, #19]
            break;
 8006494:	e006      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0ec      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	4903      	ldr	r1, [pc, #12]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064c0:	e008      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064c2:	7cfb      	ldrb	r3, [r7, #19]
 80064c4:	74bb      	strb	r3, [r7, #18]
 80064c6:	e005      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064c8:	40021000 	.word	0x40021000
 80064cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064d4:	7c7b      	ldrb	r3, [r7, #17]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d105      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064da:	4ba6      	ldr	r3, [pc, #664]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064de:	4aa5      	ldr	r2, [pc, #660]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064f2:	4ba0      	ldr	r3, [pc, #640]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f023 0203 	bic.w	r2, r3, #3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	499c      	ldr	r1, [pc, #624]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006514:	4b97      	ldr	r3, [pc, #604]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f023 020c 	bic.w	r2, r3, #12
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	4994      	ldr	r1, [pc, #592]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006536:	4b8f      	ldr	r3, [pc, #572]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	498b      	ldr	r1, [pc, #556]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006558:	4b86      	ldr	r3, [pc, #536]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	4983      	ldr	r1, [pc, #524]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0320 	and.w	r3, r3, #32
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800657a:	4b7e      	ldr	r3, [pc, #504]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	497a      	ldr	r1, [pc, #488]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800659c:	4b75      	ldr	r3, [pc, #468]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	4972      	ldr	r1, [pc, #456]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065be:	4b6d      	ldr	r3, [pc, #436]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	4969      	ldr	r1, [pc, #420]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065e0:	4b64      	ldr	r3, [pc, #400]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	4961      	ldr	r1, [pc, #388]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006602:	4b5c      	ldr	r3, [pc, #368]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	4958      	ldr	r1, [pc, #352]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006620:	2b00      	cmp	r3, #0
 8006622:	d015      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006624:	4b53      	ldr	r3, [pc, #332]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	4950      	ldr	r1, [pc, #320]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006642:	d105      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006644:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4a4a      	ldr	r2, [pc, #296]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800664e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006658:	2b00      	cmp	r3, #0
 800665a:	d015      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800665c:	4b45      	ldr	r3, [pc, #276]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006662:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	4942      	ldr	r1, [pc, #264]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800667a:	d105      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800667c:	4b3d      	ldr	r3, [pc, #244]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4a3c      	ldr	r2, [pc, #240]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006686:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d015      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006694:	4b37      	ldr	r3, [pc, #220]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	4934      	ldr	r1, [pc, #208]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066b2:	d105      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b4:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4a2e      	ldr	r2, [pc, #184]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066cc:	4b29      	ldr	r3, [pc, #164]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	4926      	ldr	r1, [pc, #152]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ea:	d105      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066ec:	4b21      	ldr	r3, [pc, #132]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4a20      	ldr	r2, [pc, #128]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006704:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	4918      	ldr	r1, [pc, #96]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006722:	d105      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006724:	4b13      	ldr	r3, [pc, #76]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4a12      	ldr	r2, [pc, #72]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800672a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800672e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d015      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800673c:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	490a      	ldr	r1, [pc, #40]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800675a:	d105      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006766:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006768:	7cbb      	ldrb	r3, [r7, #18]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40021000 	.word	0x40021000

08006778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e049      	b.n	800681e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fb fa24 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f000 fdfc 	bl	80073b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e049      	b.n	80068cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f841 	bl	80068d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f000 fda5 	bl	80073b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_TIM_PWM_Start_IT+0x28>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e03c      	b.n	800698a <HAL_TIM_PWM_Start_IT+0xa2>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d109      	bne.n	800692a <HAL_TIM_PWM_Start_IT+0x42>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	bf14      	ite	ne
 8006922:	2301      	movne	r3, #1
 8006924:	2300      	moveq	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	e02f      	b.n	800698a <HAL_TIM_PWM_Start_IT+0xa2>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d109      	bne.n	8006944 <HAL_TIM_PWM_Start_IT+0x5c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	bf14      	ite	ne
 800693c:	2301      	movne	r3, #1
 800693e:	2300      	moveq	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	e022      	b.n	800698a <HAL_TIM_PWM_Start_IT+0xa2>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b0c      	cmp	r3, #12
 8006948:	d109      	bne.n	800695e <HAL_TIM_PWM_Start_IT+0x76>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b01      	cmp	r3, #1
 8006954:	bf14      	ite	ne
 8006956:	2301      	movne	r3, #1
 8006958:	2300      	moveq	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	e015      	b.n	800698a <HAL_TIM_PWM_Start_IT+0xa2>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b10      	cmp	r3, #16
 8006962:	d109      	bne.n	8006978 <HAL_TIM_PWM_Start_IT+0x90>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	e008      	b.n	800698a <HAL_TIM_PWM_Start_IT+0xa2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e0e2      	b.n	8006b58 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_PWM_Start_IT+0xba>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a0:	e023      	b.n	80069ea <HAL_TIM_PWM_Start_IT+0x102>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_PWM_Start_IT+0xca>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b0:	e01b      	b.n	80069ea <HAL_TIM_PWM_Start_IT+0x102>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_PWM_Start_IT+0xda>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069c0:	e013      	b.n	80069ea <HAL_TIM_PWM_Start_IT+0x102>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b0c      	cmp	r3, #12
 80069c6:	d104      	bne.n	80069d2 <HAL_TIM_PWM_Start_IT+0xea>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069d0:	e00b      	b.n	80069ea <HAL_TIM_PWM_Start_IT+0x102>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b10      	cmp	r3, #16
 80069d6:	d104      	bne.n	80069e2 <HAL_TIM_PWM_Start_IT+0xfa>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069e0:	e003      	b.n	80069ea <HAL_TIM_PWM_Start_IT+0x102>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b0c      	cmp	r3, #12
 80069ee:	d841      	bhi.n	8006a74 <HAL_TIM_PWM_Start_IT+0x18c>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <HAL_TIM_PWM_Start_IT+0x110>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a2d 	.word	0x08006a2d
 80069fc:	08006a75 	.word	0x08006a75
 8006a00:	08006a75 	.word	0x08006a75
 8006a04:	08006a75 	.word	0x08006a75
 8006a08:	08006a3f 	.word	0x08006a3f
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	08006a75 	.word	0x08006a75
 8006a14:	08006a75 	.word	0x08006a75
 8006a18:	08006a51 	.word	0x08006a51
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	08006a75 	.word	0x08006a75
 8006a28:	08006a63 	.word	0x08006a63
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0202 	orr.w	r2, r2, #2
 8006a3a:	60da      	str	r2, [r3, #12]
      break;
 8006a3c:	e01d      	b.n	8006a7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0204 	orr.w	r2, r2, #4
 8006a4c:	60da      	str	r2, [r3, #12]
      break;
 8006a4e:	e014      	b.n	8006a7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	60da      	str	r2, [r3, #12]
      break;
 8006a60:	e00b      	b.n	8006a7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0210 	orr.w	r2, r2, #16
 8006a70:	60da      	str	r2, [r3, #12]
      break;
 8006a72:	e002      	b.n	8006a7a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
      break;
 8006a78:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d16a      	bne.n	8006b56 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f001 f8b5 	bl	8007bf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a33      	ldr	r2, [pc, #204]	; (8006b60 <HAL_TIM_PWM_Start_IT+0x278>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a31      	ldr	r2, [pc, #196]	; (8006b64 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a30      	ldr	r2, [pc, #192]	; (8006b68 <HAL_TIM_PWM_Start_IT+0x280>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2e      	ldr	r2, [pc, #184]	; (8006b6c <HAL_TIM_PWM_Start_IT+0x284>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a2d      	ldr	r2, [pc, #180]	; (8006b70 <HAL_TIM_PWM_Start_IT+0x288>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIM_PWM_Start_IT+0x1dc>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_TIM_PWM_Start_IT+0x1de>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <HAL_TIM_PWM_Start_IT+0x278>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_TIM_PWM_Start_IT+0x22e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aec:	d013      	beq.n	8006b16 <HAL_TIM_PWM_Start_IT+0x22e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a20      	ldr	r2, [pc, #128]	; (8006b74 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_TIM_PWM_Start_IT+0x22e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <HAL_TIM_PWM_Start_IT+0x290>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_TIM_PWM_Start_IT+0x22e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a17      	ldr	r2, [pc, #92]	; (8006b64 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_TIM_PWM_Start_IT+0x22e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <HAL_TIM_PWM_Start_IT+0x280>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d115      	bne.n	8006b42 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <HAL_TIM_PWM_Start_IT+0x294>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b06      	cmp	r3, #6
 8006b26:	d015      	beq.n	8006b54 <HAL_TIM_PWM_Start_IT+0x26c>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2e:	d011      	beq.n	8006b54 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	e008      	b.n	8006b54 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e000      	b.n	8006b56 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b54:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40013400 	.word	0x40013400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40014800 	.word	0x40014800
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	00010007 	.word	0x00010007

08006b80 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e041      	b.n	8006c18 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f839 	bl	8006c20 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f000 fbf7 	bl	80073b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0208 	bic.w	r2, r2, #8
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d122      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d11b      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0202 	mvn.w	r2, #2
 8006c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fb7e 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 8006c7c:	e005      	b.n	8006c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fb70 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fb81 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d122      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d11b      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f06f 0204 	mvn.w	r2, #4
 8006cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fb54 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 8006cd0:	e005      	b.n	8006cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fb46 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb57 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d122      	bne.n	8006d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d11b      	bne.n	8006d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0208 	mvn.w	r2, #8
 8006d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2204      	movs	r2, #4
 8006d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fb2a 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 8006d24:	e005      	b.n	8006d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fb1c 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fb2d 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b10      	cmp	r3, #16
 8006d44:	d122      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d11b      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f06f 0210 	mvn.w	r2, #16
 8006d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2208      	movs	r2, #8
 8006d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fb00 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 8006d78:	e005      	b.n	8006d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 faf2 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fb03 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d10e      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0201 	mvn.w	r2, #1
 8006db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 facc 	bl	8007350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d10e      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd0:	2b80      	cmp	r3, #128	; 0x80
 8006dd2:	d107      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fa fcd9 	bl	8001796 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df2:	d10e      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfe:	2b80      	cmp	r3, #128	; 0x80
 8006e00:	d107      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fa38 	bl	8008282 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d10e      	bne.n	8006e3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d107      	bne.n	8006e3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fab1 	bl	80073a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d10e      	bne.n	8006e6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d107      	bne.n	8006e6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f06f 0220 	mvn.w	r2, #32
 8006e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fa02 	bl	800826e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e78:	d10f      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e88:	d107      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f9fe 	bl	8008296 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ea8:	d10f      	bne.n	8006eca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eb8:	d107      	bne.n	8006eca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 f9f0 	bl	80082aa <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed8:	d10f      	bne.n	8006efa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ee8:	d107      	bne.n	8006efa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 f9e2 	bl	80082be <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f08:	d10f      	bne.n	8006f2a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f18:	d107      	bne.n	8006f2a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f9d4 	bl	80082d2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e0ff      	b.n	8007152 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b14      	cmp	r3, #20
 8006f5e:	f200 80f0 	bhi.w	8007142 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08007143 	.word	0x08007143
 8006f70:	08007143 	.word	0x08007143
 8006f74:	08007143 	.word	0x08007143
 8006f78:	08006ffd 	.word	0x08006ffd
 8006f7c:	08007143 	.word	0x08007143
 8006f80:	08007143 	.word	0x08007143
 8006f84:	08007143 	.word	0x08007143
 8006f88:	0800703f 	.word	0x0800703f
 8006f8c:	08007143 	.word	0x08007143
 8006f90:	08007143 	.word	0x08007143
 8006f94:	08007143 	.word	0x08007143
 8006f98:	0800707f 	.word	0x0800707f
 8006f9c:	08007143 	.word	0x08007143
 8006fa0:	08007143 	.word	0x08007143
 8006fa4:	08007143 	.word	0x08007143
 8006fa8:	080070c1 	.word	0x080070c1
 8006fac:	08007143 	.word	0x08007143
 8006fb0:	08007143 	.word	0x08007143
 8006fb4:	08007143 	.word	0x08007143
 8006fb8:	08007101 	.word	0x08007101
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fa86 	bl	80074d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0208 	orr.w	r2, r2, #8
 8006fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0204 	bic.w	r2, r2, #4
 8006fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6999      	ldr	r1, [r3, #24]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	619a      	str	r2, [r3, #24]
      break;
 8006ffa:	e0a5      	b.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 faf6 	bl	80075f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6999      	ldr	r1, [r3, #24]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	021a      	lsls	r2, r3, #8
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	619a      	str	r2, [r3, #24]
      break;
 800703c:	e084      	b.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fb5f 	bl	8007708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0208 	orr.w	r2, r2, #8
 8007058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0204 	bic.w	r2, r2, #4
 8007068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69d9      	ldr	r1, [r3, #28]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	61da      	str	r2, [r3, #28]
      break;
 800707c:	e064      	b.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fbc7 	bl	8007818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69d9      	ldr	r1, [r3, #28]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	021a      	lsls	r2, r3, #8
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	61da      	str	r2, [r3, #28]
      break;
 80070be:	e043      	b.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fc30 	bl	800792c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0208 	orr.w	r2, r2, #8
 80070da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0204 	bic.w	r2, r2, #4
 80070ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	691a      	ldr	r2, [r3, #16]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80070fe:	e023      	b.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fc74 	bl	80079f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800711a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800712a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	021a      	lsls	r2, r3, #8
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007140:	e002      	b.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
      break;
 8007146:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007150:	7dfb      	ldrb	r3, [r7, #23]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop

0800715c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIM_ConfigClockSource+0x1c>
 8007174:	2302      	movs	r3, #2
 8007176:	e0de      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x1da>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800719a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a63      	ldr	r2, [pc, #396]	; (8007340 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	f000 80a9 	beq.w	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 80071b8:	4a61      	ldr	r2, [pc, #388]	; (8007340 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	f200 80ae 	bhi.w	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 80071c0:	4a60      	ldr	r2, [pc, #384]	; (8007344 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	f000 80a1 	beq.w	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 80071c8:	4a5e      	ldr	r2, [pc, #376]	; (8007344 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	f200 80a6 	bhi.w	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 80071d0:	4a5d      	ldr	r2, [pc, #372]	; (8007348 <HAL_TIM_ConfigClockSource+0x1ec>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	f000 8099 	beq.w	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 80071d8:	4a5b      	ldr	r2, [pc, #364]	; (8007348 <HAL_TIM_ConfigClockSource+0x1ec>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	f200 809e 	bhi.w	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 80071e0:	4a5a      	ldr	r2, [pc, #360]	; (800734c <HAL_TIM_ConfigClockSource+0x1f0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	f000 8091 	beq.w	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 80071e8:	4a58      	ldr	r2, [pc, #352]	; (800734c <HAL_TIM_ConfigClockSource+0x1f0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	f200 8096 	bhi.w	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 80071f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071f4:	f000 8089 	beq.w	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 80071f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80071fc:	f200 808e 	bhi.w	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 8007200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007204:	d03e      	beq.n	8007284 <HAL_TIM_ConfigClockSource+0x128>
 8007206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720a:	f200 8087 	bhi.w	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 800720e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007212:	f000 8086 	beq.w	8007322 <HAL_TIM_ConfigClockSource+0x1c6>
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	d87f      	bhi.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 800721c:	2b70      	cmp	r3, #112	; 0x70
 800721e:	d01a      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0xfa>
 8007220:	2b70      	cmp	r3, #112	; 0x70
 8007222:	d87b      	bhi.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 8007224:	2b60      	cmp	r3, #96	; 0x60
 8007226:	d050      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0x16e>
 8007228:	2b60      	cmp	r3, #96	; 0x60
 800722a:	d877      	bhi.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 800722c:	2b50      	cmp	r3, #80	; 0x50
 800722e:	d03c      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x14e>
 8007230:	2b50      	cmp	r3, #80	; 0x50
 8007232:	d873      	bhi.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d058      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0x18e>
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d86f      	bhi.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 800723c:	2b30      	cmp	r3, #48	; 0x30
 800723e:	d064      	beq.n	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 8007240:	2b30      	cmp	r3, #48	; 0x30
 8007242:	d86b      	bhi.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 8007244:	2b20      	cmp	r3, #32
 8007246:	d060      	beq.n	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 8007248:	2b20      	cmp	r3, #32
 800724a:	d867      	bhi.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d05c      	beq.n	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 8007250:	2b10      	cmp	r3, #16
 8007252:	d05a      	beq.n	800730a <HAL_TIM_ConfigClockSource+0x1ae>
 8007254:	e062      	b.n	800731c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6899      	ldr	r1, [r3, #8]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f000 fca7 	bl	8007bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	609a      	str	r2, [r3, #8]
      break;
 8007282:	e04f      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	6899      	ldr	r1, [r3, #8]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f000 fc90 	bl	8007bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a6:	609a      	str	r2, [r3, #8]
      break;
 80072a8:	e03c      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6859      	ldr	r1, [r3, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f000 fc02 	bl	8007ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2150      	movs	r1, #80	; 0x50
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fc5b 	bl	8007b7e <TIM_ITRx_SetConfig>
      break;
 80072c8:	e02c      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6859      	ldr	r1, [r3, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f000 fc21 	bl	8007b1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2160      	movs	r1, #96	; 0x60
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fc4b 	bl	8007b7e <TIM_ITRx_SetConfig>
      break;
 80072e8:	e01c      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	6859      	ldr	r1, [r3, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	461a      	mov	r2, r3
 80072f8:	f000 fbe2 	bl	8007ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2140      	movs	r1, #64	; 0x40
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fc3b 	bl	8007b7e <TIM_ITRx_SetConfig>
      break;
 8007308:	e00c      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	4610      	mov	r0, r2
 8007316:	f000 fc32 	bl	8007b7e <TIM_ITRx_SetConfig>
      break;
 800731a:	e003      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
      break;
 8007320:	e000      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	00100070 	.word	0x00100070
 8007344:	00100040 	.word	0x00100040
 8007348:	00100030 	.word	0x00100030
 800734c:	00100020 	.word	0x00100020

08007350 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <TIM_Base_SetConfig+0x104>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00f      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d2:	d00b      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a39      	ldr	r2, [pc, #228]	; (80074bc <TIM_Base_SetConfig+0x108>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d007      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a38      	ldr	r2, [pc, #224]	; (80074c0 <TIM_Base_SetConfig+0x10c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a37      	ldr	r2, [pc, #220]	; (80074c4 <TIM_Base_SetConfig+0x110>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d108      	bne.n	80073fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a2d      	ldr	r2, [pc, #180]	; (80074b8 <TIM_Base_SetConfig+0x104>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01b      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740c:	d017      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <TIM_Base_SetConfig+0x108>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a29      	ldr	r2, [pc, #164]	; (80074c0 <TIM_Base_SetConfig+0x10c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a28      	ldr	r2, [pc, #160]	; (80074c4 <TIM_Base_SetConfig+0x110>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a26      	ldr	r2, [pc, #152]	; (80074cc <TIM_Base_SetConfig+0x118>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <TIM_Base_SetConfig+0x11c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d108      	bne.n	8007450 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <TIM_Base_SetConfig+0x104>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00f      	beq.n	800749c <TIM_Base_SetConfig+0xe8>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a11      	ldr	r2, [pc, #68]	; (80074c4 <TIM_Base_SetConfig+0x110>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_Base_SetConfig+0xe8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_Base_SetConfig+0xe8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a0f      	ldr	r2, [pc, #60]	; (80074cc <TIM_Base_SetConfig+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_Base_SetConfig+0xe8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a0e      	ldr	r2, [pc, #56]	; (80074d0 <TIM_Base_SetConfig+0x11c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d103      	bne.n	80074a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	615a      	str	r2, [r3, #20]
}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40012c00 	.word	0x40012c00
 80074bc:	40000400 	.word	0x40000400
 80074c0:	40000800 	.word	0x40000800
 80074c4:	40013400 	.word	0x40013400
 80074c8:	40014000 	.word	0x40014000
 80074cc:	40014400 	.word	0x40014400
 80074d0:	40014800 	.word	0x40014800

080074d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f023 0201 	bic.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f023 0302 	bic.w	r3, r3, #2
 8007520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a2c      	ldr	r2, [pc, #176]	; (80075e0 <TIM_OC1_SetConfig+0x10c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00f      	beq.n	8007554 <TIM_OC1_SetConfig+0x80>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a2b      	ldr	r2, [pc, #172]	; (80075e4 <TIM_OC1_SetConfig+0x110>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00b      	beq.n	8007554 <TIM_OC1_SetConfig+0x80>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <TIM_OC1_SetConfig+0x114>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d007      	beq.n	8007554 <TIM_OC1_SetConfig+0x80>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a29      	ldr	r2, [pc, #164]	; (80075ec <TIM_OC1_SetConfig+0x118>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_OC1_SetConfig+0x80>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a28      	ldr	r2, [pc, #160]	; (80075f0 <TIM_OC1_SetConfig+0x11c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d10c      	bne.n	800756e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f023 0308 	bic.w	r3, r3, #8
 800755a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f023 0304 	bic.w	r3, r3, #4
 800756c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <TIM_OC1_SetConfig+0x10c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <TIM_OC1_SetConfig+0xc2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a1a      	ldr	r2, [pc, #104]	; (80075e4 <TIM_OC1_SetConfig+0x110>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00b      	beq.n	8007596 <TIM_OC1_SetConfig+0xc2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a19      	ldr	r2, [pc, #100]	; (80075e8 <TIM_OC1_SetConfig+0x114>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <TIM_OC1_SetConfig+0xc2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a18      	ldr	r2, [pc, #96]	; (80075ec <TIM_OC1_SetConfig+0x118>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_OC1_SetConfig+0xc2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <TIM_OC1_SetConfig+0x11c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d111      	bne.n	80075ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800759c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	621a      	str	r2, [r3, #32]
}
 80075d4:	bf00      	nop
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40013400 	.word	0x40013400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40014400 	.word	0x40014400
 80075f0:	40014800 	.word	0x40014800

080075f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f023 0210 	bic.w	r2, r3, #16
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f023 0320 	bic.w	r3, r3, #32
 8007642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a28      	ldr	r2, [pc, #160]	; (80076f4 <TIM_OC2_SetConfig+0x100>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_OC2_SetConfig+0x6c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a27      	ldr	r2, [pc, #156]	; (80076f8 <TIM_OC2_SetConfig+0x104>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d10d      	bne.n	800767c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <TIM_OC2_SetConfig+0x100>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00f      	beq.n	80076a4 <TIM_OC2_SetConfig+0xb0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a1c      	ldr	r2, [pc, #112]	; (80076f8 <TIM_OC2_SetConfig+0x104>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00b      	beq.n	80076a4 <TIM_OC2_SetConfig+0xb0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <TIM_OC2_SetConfig+0x108>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d007      	beq.n	80076a4 <TIM_OC2_SetConfig+0xb0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <TIM_OC2_SetConfig+0x10c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC2_SetConfig+0xb0>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a19      	ldr	r2, [pc, #100]	; (8007704 <TIM_OC2_SetConfig+0x110>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d113      	bne.n	80076cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40012c00 	.word	0x40012c00
 80076f8:	40013400 	.word	0x40013400
 80076fc:	40014000 	.word	0x40014000
 8007700:	40014400 	.word	0x40014400
 8007704:	40014800 	.word	0x40014800

08007708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a27      	ldr	r2, [pc, #156]	; (8007804 <TIM_OC3_SetConfig+0xfc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <TIM_OC3_SetConfig+0x6a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a26      	ldr	r2, [pc, #152]	; (8007808 <TIM_OC3_SetConfig+0x100>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d10d      	bne.n	800778e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800778c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <TIM_OC3_SetConfig+0xfc>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00f      	beq.n	80077b6 <TIM_OC3_SetConfig+0xae>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <TIM_OC3_SetConfig+0x100>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00b      	beq.n	80077b6 <TIM_OC3_SetConfig+0xae>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1a      	ldr	r2, [pc, #104]	; (800780c <TIM_OC3_SetConfig+0x104>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d007      	beq.n	80077b6 <TIM_OC3_SetConfig+0xae>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a19      	ldr	r2, [pc, #100]	; (8007810 <TIM_OC3_SetConfig+0x108>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d003      	beq.n	80077b6 <TIM_OC3_SetConfig+0xae>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a18      	ldr	r2, [pc, #96]	; (8007814 <TIM_OC3_SetConfig+0x10c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d113      	bne.n	80077de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	621a      	str	r2, [r3, #32]
}
 80077f8:	bf00      	nop
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40013400 	.word	0x40013400
 800780c:	40014000 	.word	0x40014000
 8007810:	40014400 	.word	0x40014400
 8007814:	40014800 	.word	0x40014800

08007818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a28      	ldr	r2, [pc, #160]	; (8007918 <TIM_OC4_SetConfig+0x100>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC4_SetConfig+0x6c>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a27      	ldr	r2, [pc, #156]	; (800791c <TIM_OC4_SetConfig+0x104>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d10d      	bne.n	80078a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800788a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	031b      	lsls	r3, r3, #12
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800789e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a1d      	ldr	r2, [pc, #116]	; (8007918 <TIM_OC4_SetConfig+0x100>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00f      	beq.n	80078c8 <TIM_OC4_SetConfig+0xb0>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a1c      	ldr	r2, [pc, #112]	; (800791c <TIM_OC4_SetConfig+0x104>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00b      	beq.n	80078c8 <TIM_OC4_SetConfig+0xb0>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a1b      	ldr	r2, [pc, #108]	; (8007920 <TIM_OC4_SetConfig+0x108>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d007      	beq.n	80078c8 <TIM_OC4_SetConfig+0xb0>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <TIM_OC4_SetConfig+0x10c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_OC4_SetConfig+0xb0>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a19      	ldr	r2, [pc, #100]	; (8007928 <TIM_OC4_SetConfig+0x110>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d113      	bne.n	80078f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	019b      	lsls	r3, r3, #6
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	019b      	lsls	r3, r3, #6
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40013400 	.word	0x40013400
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800

0800792c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	041b      	lsls	r3, r3, #16
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <TIM_OC5_SetConfig+0xb4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00f      	beq.n	80079a6 <TIM_OC5_SetConfig+0x7a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a16      	ldr	r2, [pc, #88]	; (80079e4 <TIM_OC5_SetConfig+0xb8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00b      	beq.n	80079a6 <TIM_OC5_SetConfig+0x7a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a15      	ldr	r2, [pc, #84]	; (80079e8 <TIM_OC5_SetConfig+0xbc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d007      	beq.n	80079a6 <TIM_OC5_SetConfig+0x7a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a14      	ldr	r2, [pc, #80]	; (80079ec <TIM_OC5_SetConfig+0xc0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d003      	beq.n	80079a6 <TIM_OC5_SetConfig+0x7a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <TIM_OC5_SetConfig+0xc4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d109      	bne.n	80079ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	621a      	str	r2, [r3, #32]
}
 80079d4:	bf00      	nop
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40013400 	.word	0x40013400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40014400 	.word	0x40014400
 80079f0:	40014800 	.word	0x40014800

080079f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	051b      	lsls	r3, r3, #20
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a18      	ldr	r2, [pc, #96]	; (8007aac <TIM_OC6_SetConfig+0xb8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d00f      	beq.n	8007a70 <TIM_OC6_SetConfig+0x7c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <TIM_OC6_SetConfig+0xbc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00b      	beq.n	8007a70 <TIM_OC6_SetConfig+0x7c>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a16      	ldr	r2, [pc, #88]	; (8007ab4 <TIM_OC6_SetConfig+0xc0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d007      	beq.n	8007a70 <TIM_OC6_SetConfig+0x7c>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <TIM_OC6_SetConfig+0xc4>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_OC6_SetConfig+0x7c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a14      	ldr	r2, [pc, #80]	; (8007abc <TIM_OC6_SetConfig+0xc8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d109      	bne.n	8007a84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40013400 	.word	0x40013400
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f023 0201 	bic.w	r2, r3, #1
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	011b      	lsls	r3, r3, #4
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f023 030a 	bic.w	r3, r3, #10
 8007afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	621a      	str	r2, [r3, #32]
}
 8007b12:	bf00      	nop
 8007b14:	371c      	adds	r7, #28
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b087      	sub	sp, #28
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0210 	bic.w	r2, r3, #16
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	031b      	lsls	r3, r3, #12
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f043 0307 	orr.w	r3, r3, #7
 8007ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	609a      	str	r2, [r3, #8]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	021a      	lsls	r2, r3, #8
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	609a      	str	r2, [r3, #8]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1a      	ldr	r2, [r3, #32]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	bf00      	nop
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <HAL_TIMEx_PWMN_Start_IT+0x28>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	bf14      	ite	ne
 8007c64:	2301      	movne	r3, #1
 8007c66:	2300      	moveq	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	e022      	b.n	8007cb2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d109      	bne.n	8007c86 <HAL_TIMEx_PWMN_Start_IT+0x42>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	bf14      	ite	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	2300      	moveq	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	e015      	b.n	8007cb2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d109      	bne.n	8007ca0 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	bf14      	ite	ne
 8007c98:	2301      	movne	r3, #1
 8007c9a:	2300      	moveq	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	e008      	b.n	8007cb2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	bf14      	ite	ne
 8007cac:	2301      	movne	r3, #1
 8007cae:	2300      	moveq	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e0bc      	b.n	8007e34 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <HAL_TIMEx_PWMN_Start_IT+0x86>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc8:	e013      	b.n	8007cf2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d104      	bne.n	8007cda <HAL_TIMEx_PWMN_Start_IT+0x96>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cd8:	e00b      	b.n	8007cf2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d104      	bne.n	8007cea <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ce8:	e003      	b.n	8007cf2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b0c      	cmp	r3, #12
 8007cf6:	d841      	bhi.n	8007d7c <HAL_TIMEx_PWMN_Start_IT+0x138>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d35 	.word	0x08007d35
 8007d04:	08007d7d 	.word	0x08007d7d
 8007d08:	08007d7d 	.word	0x08007d7d
 8007d0c:	08007d7d 	.word	0x08007d7d
 8007d10:	08007d47 	.word	0x08007d47
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007d7d 	.word	0x08007d7d
 8007d1c:	08007d7d 	.word	0x08007d7d
 8007d20:	08007d59 	.word	0x08007d59
 8007d24:	08007d7d 	.word	0x08007d7d
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007d7d 	.word	0x08007d7d
 8007d30:	08007d6b 	.word	0x08007d6b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0202 	orr.w	r2, r2, #2
 8007d42:	60da      	str	r2, [r3, #12]
      break;
 8007d44:	e01d      	b.n	8007d82 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0204 	orr.w	r2, r2, #4
 8007d54:	60da      	str	r2, [r3, #12]
      break;
 8007d56:	e014      	b.n	8007d82 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0208 	orr.w	r2, r2, #8
 8007d66:	60da      	str	r2, [r3, #12]
      break;
 8007d68:	e00b      	b.n	8007d82 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0210 	orr.w	r2, r2, #16
 8007d78:	60da      	str	r2, [r3, #12]
      break;
 8007d7a:	e002      	b.n	8007d82 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d80:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d154      	bne.n	8007e32 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d96:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 faa0 	bl	80082e6 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007db4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a20      	ldr	r2, [pc, #128]	; (8007e3c <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d018      	beq.n	8007df2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc8:	d013      	beq.n	8007df2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a1c      	ldr	r2, [pc, #112]	; (8007e40 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00e      	beq.n	8007df2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1a      	ldr	r2, [pc, #104]	; (8007e44 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d009      	beq.n	8007df2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a19      	ldr	r2, [pc, #100]	; (8007e48 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d004      	beq.n	8007df2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <HAL_TIMEx_PWMN_Start_IT+0x208>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d115      	bne.n	8007e1e <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b06      	cmp	r3, #6
 8007e02:	d015      	beq.n	8007e30 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0a:	d011      	beq.n	8007e30 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1c:	e008      	b.n	8007e30 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0201 	orr.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	e000      	b.n	8007e32 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e30:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40012c00 	.word	0x40012c00
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40013400 	.word	0x40013400
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	00010007 	.word	0x00010007

08007e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e065      	b.n	8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a2c      	ldr	r2, [pc, #176]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a2b      	ldr	r2, [pc, #172]	; (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d108      	bne.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d018      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee2:	d013      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00e      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d009      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a12      	ldr	r2, [pc, #72]	; (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d004      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d10c      	bne.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40014000 	.word	0x40014000

08007f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e087      	b.n	8008084 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a27      	ldr	r2, [pc, #156]	; (8008090 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d004      	beq.n	8008002 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a25      	ldr	r2, [pc, #148]	; (8008094 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d106      	bne.n	8008010 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d126      	bne.n	8008072 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	051b      	lsls	r3, r3, #20
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a0e      	ldr	r2, [pc, #56]	; (8008090 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d004      	beq.n	8008064 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a0d      	ldr	r2, [pc, #52]	; (8008094 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d106      	bne.n	8008072 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	40012c00 	.word	0x40012c00
 8008094:	40013400 	.word	0x40013400

08008098 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008098:	b480      	push	{r7}
 800809a:	b08b      	sub	sp, #44	; 0x2c
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_TIMEx_ConfigBreakInput+0x20>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e0c1      	b.n	800823c <HAL_TIMEx_ConfigBreakInput+0x1a4>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	d854      	bhi.n	8008174 <HAL_TIMEx_ConfigBreakInput+0xdc>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <HAL_TIMEx_ConfigBreakInput+0x38>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	08008111 	.word	0x08008111
 80080d4:	08008125 	.word	0x08008125
 80080d8:	08008175 	.word	0x08008175
 80080dc:	08008139 	.word	0x08008139
 80080e0:	08008175 	.word	0x08008175
 80080e4:	08008175 	.word	0x08008175
 80080e8:	08008175 	.word	0x08008175
 80080ec:	0800814d 	.word	0x0800814d
 80080f0:	08008175 	.word	0x08008175
 80080f4:	08008175 	.word	0x08008175
 80080f8:	08008175 	.word	0x08008175
 80080fc:	08008175 	.word	0x08008175
 8008100:	08008175 	.word	0x08008175
 8008104:	08008175 	.word	0x08008175
 8008108:	08008175 	.word	0x08008175
 800810c:	08008161 	.word	0x08008161
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008110:	2301      	movs	r3, #1
 8008112:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800811e:	2309      	movs	r3, #9
 8008120:	617b      	str	r3, [r7, #20]
      break;
 8008122:	e030      	b.n	8008186 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008124:	2302      	movs	r3, #2
 8008126:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008128:	2301      	movs	r3, #1
 800812a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800812c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008130:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008132:	230a      	movs	r3, #10
 8008134:	617b      	str	r3, [r7, #20]
      break;
 8008136:	e026      	b.n	8008186 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008138:	2304      	movs	r3, #4
 800813a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800813c:	2302      	movs	r3, #2
 800813e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008144:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008146:	230b      	movs	r3, #11
 8008148:	617b      	str	r3, [r7, #20]
      break;
 800814a:	e01c      	b.n	8008186 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800814c:	2308      	movs	r3, #8
 800814e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8008150:	2303      	movs	r3, #3
 8008152:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008158:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800815a:	230c      	movs	r3, #12
 800815c:	617b      	str	r3, [r7, #20]
      break;
 800815e:	e012      	b.n	8008186 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8008160:	2310      	movs	r3, #16
 8008162:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008164:	2304      	movs	r3, #4
 8008166:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800816c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800816e:	230d      	movs	r3, #13
 8008170:	617b      	str	r3, [r7, #20]
      break;
 8008172:	e008      	b.n	8008186 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	617b      	str	r3, [r7, #20]
      break;
 8008184:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d003      	beq.n	8008194 <HAL_TIMEx_ConfigBreakInput+0xfc>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d025      	beq.n	80081de <HAL_TIMEx_ConfigBreakInput+0x146>
 8008192:	e049      	b.n	8008228 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	43db      	mvns	r3, r3
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4013      	ands	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	409a      	lsls	r2, r3
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	4013      	ands	r3, r2
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	43db      	mvns	r3, r3
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4013      	ands	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689a      	ldr	r2, [r3, #8]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	409a      	lsls	r2, r3
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4013      	ands	r3, r2
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80081dc:	e028      	b.n	8008230 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e4:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4013      	ands	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	409a      	lsls	r2, r3
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	4013      	ands	r3, r2
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4313      	orrs	r3, r2
 8008200:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	43db      	mvns	r3, r3
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4013      	ands	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	409a      	lsls	r2, r3
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	4013      	ands	r3, r2
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008226:	e003      	b.n	8008230 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800822e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800823c:	4618      	mov	r0, r3
 800823e:	372c      	adds	r7, #44	; 0x2c
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800825e:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b087      	sub	sp, #28
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	2204      	movs	r2, #4
 80082fa:	fa02 f303 	lsl.w	r3, r2, r3
 80082fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	43db      	mvns	r3, r3
 8008308:	401a      	ands	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a1a      	ldr	r2, [r3, #32]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f003 031f 	and.w	r3, r3, #31
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	fa01 f303 	lsl.w	r3, r1, r3
 800831e:	431a      	orrs	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008330:	b480      	push	{r7}
 8008332:	b08b      	sub	sp, #44	; 0x2c
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	fa93 f3a3 	rbit	r3, r3
 800834a:	613b      	str	r3, [r7, #16]
  return result;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008356:	2320      	movs	r3, #32
 8008358:	e003      	b.n	8008362 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	fab3 f383 	clz	r3, r3
 8008360:	b2db      	uxtb	r3, r3
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	2103      	movs	r1, #3
 8008366:	fa01 f303 	lsl.w	r3, r1, r3
 800836a:	43db      	mvns	r3, r3
 800836c:	401a      	ands	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	fa93 f3a3 	rbit	r3, r3
 8008378:	61fb      	str	r3, [r7, #28]
  return result;
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008384:	2320      	movs	r3, #32
 8008386:	e003      	b.n	8008390 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	fab3 f383 	clz	r3, r3
 800838e:	b2db      	uxtb	r3, r3
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	fa01 f303 	lsl.w	r3, r1, r3
 8008398:	431a      	orrs	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	601a      	str	r2, [r3, #0]
}
 800839e:	bf00      	nop
 80083a0:	372c      	adds	r7, #44	; 0x2c
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	43db      	mvns	r3, r3
 80083be:	401a      	ands	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	431a      	orrs	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	605a      	str	r2, [r3, #4]
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80083da:	b480      	push	{r7}
 80083dc:	b08b      	sub	sp, #44	; 0x2c
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	fa93 f3a3 	rbit	r3, r3
 80083f4:	613b      	str	r3, [r7, #16]
  return result;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008400:	2320      	movs	r3, #32
 8008402:	e003      	b.n	800840c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	fab3 f383 	clz	r3, r3
 800840a:	b2db      	uxtb	r3, r3
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	2103      	movs	r1, #3
 8008410:	fa01 f303 	lsl.w	r3, r1, r3
 8008414:	43db      	mvns	r3, r3
 8008416:	401a      	ands	r2, r3
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	fa93 f3a3 	rbit	r3, r3
 8008422:	61fb      	str	r3, [r7, #28]
  return result;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800842e:	2320      	movs	r3, #32
 8008430:	e003      	b.n	800843a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	fab3 f383 	clz	r3, r3
 8008438:	b2db      	uxtb	r3, r3
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	fa01 f303 	lsl.w	r3, r1, r3
 8008442:	431a      	orrs	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008448:	bf00      	nop
 800844a:	372c      	adds	r7, #44	; 0x2c
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008454:	b480      	push	{r7}
 8008456:	b08b      	sub	sp, #44	; 0x2c
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	fa93 f3a3 	rbit	r3, r3
 800846e:	613b      	str	r3, [r7, #16]
  return result;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800847a:	2320      	movs	r3, #32
 800847c:	e003      	b.n	8008486 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	fab3 f383 	clz	r3, r3
 8008484:	b2db      	uxtb	r3, r3
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	2103      	movs	r1, #3
 800848a:	fa01 f303 	lsl.w	r3, r1, r3
 800848e:	43db      	mvns	r3, r3
 8008490:	401a      	ands	r2, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	fa93 f3a3 	rbit	r3, r3
 800849c:	61fb      	str	r3, [r7, #28]
  return result;
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80084a8:	2320      	movs	r3, #32
 80084aa:	e003      	b.n	80084b4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	fab3 f383 	clz	r3, r3
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	fa01 f303 	lsl.w	r3, r1, r3
 80084bc:	431a      	orrs	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	60da      	str	r2, [r3, #12]
}
 80084c2:	bf00      	nop
 80084c4:	372c      	adds	r7, #44	; 0x2c
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b08b      	sub	sp, #44	; 0x2c
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1a      	ldr	r2, [r3, #32]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	fa93 f3a3 	rbit	r3, r3
 80084e8:	613b      	str	r3, [r7, #16]
  return result;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80084f4:	2320      	movs	r3, #32
 80084f6:	e003      	b.n	8008500 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	fab3 f383 	clz	r3, r3
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	210f      	movs	r1, #15
 8008504:	fa01 f303 	lsl.w	r3, r1, r3
 8008508:	43db      	mvns	r3, r3
 800850a:	401a      	ands	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	fa93 f3a3 	rbit	r3, r3
 8008516:	61fb      	str	r3, [r7, #28]
  return result;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008522:	2320      	movs	r3, #32
 8008524:	e003      	b.n	800852e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	fab3 f383 	clz	r3, r3
 800852c:	b2db      	uxtb	r3, r3
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	fa01 f303 	lsl.w	r3, r1, r3
 8008536:	431a      	orrs	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800853c:	bf00      	nop
 800853e:	372c      	adds	r7, #44	; 0x2c
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008548:	b480      	push	{r7}
 800854a:	b08b      	sub	sp, #44	; 0x2c
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	0a1b      	lsrs	r3, r3, #8
 800855c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	fa93 f3a3 	rbit	r3, r3
 8008564:	613b      	str	r3, [r7, #16]
  return result;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008570:	2320      	movs	r3, #32
 8008572:	e003      	b.n	800857c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	fab3 f383 	clz	r3, r3
 800857a:	b2db      	uxtb	r3, r3
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	210f      	movs	r1, #15
 8008580:	fa01 f303 	lsl.w	r3, r1, r3
 8008584:	43db      	mvns	r3, r3
 8008586:	401a      	ands	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	fa93 f3a3 	rbit	r3, r3
 8008594:	61fb      	str	r3, [r7, #28]
  return result;
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80085a0:	2320      	movs	r3, #32
 80085a2:	e003      	b.n	80085ac <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	fab3 f383 	clz	r3, r3
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	fa01 f303 	lsl.w	r3, r1, r3
 80085b4:	431a      	orrs	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80085ba:	bf00      	nop
 80085bc:	372c      	adds	r7, #44	; 0x2c
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b088      	sub	sp, #32
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	fa93 f3a3 	rbit	r3, r3
 80085dc:	60fb      	str	r3, [r7, #12]
  return result;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <LL_GPIO_Init+0x26>
    return 32U;
 80085e8:	2320      	movs	r3, #32
 80085ea:	e003      	b.n	80085f4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	fab3 f383 	clz	r3, r3
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80085f6:	e048      	b.n	800868a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	2101      	movs	r1, #1
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	fa01 f303 	lsl.w	r3, r1, r3
 8008604:	4013      	ands	r3, r2
 8008606:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d03a      	beq.n	8008684 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d003      	beq.n	800861e <LL_GPIO_Init+0x58>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d10e      	bne.n	800863c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	461a      	mov	r2, r3
 8008624:	69b9      	ldr	r1, [r7, #24]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fed7 	bl	80083da <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	6819      	ldr	r1, [r3, #0]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	461a      	mov	r2, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff feb7 	bl	80083aa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	461a      	mov	r2, r3
 8008642:	69b9      	ldr	r1, [r7, #24]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff ff05 	bl	8008454 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d111      	bne.n	8008676 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2bff      	cmp	r3, #255	; 0xff
 8008656:	d807      	bhi.n	8008668 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	461a      	mov	r2, r3
 800865e:	69b9      	ldr	r1, [r7, #24]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff34 	bl	80084ce <LL_GPIO_SetAFPin_0_7>
 8008666:	e006      	b.n	8008676 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	461a      	mov	r2, r3
 800866e:	69b9      	ldr	r1, [r7, #24]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff ff69 	bl	8008548 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	461a      	mov	r2, r3
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fe56 	bl	8008330 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	3301      	adds	r3, #1
 8008688:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1af      	bne.n	80085f8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <LL_SPI_IsEnabled>:
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b2:	2b40      	cmp	r3, #64	; 0x40
 80086b4:	d101      	bne.n	80086ba <LL_SPI_IsEnabled+0x18>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <LL_SPI_IsEnabled+0x1a>
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LL_SPI_SetRxFIFOThreshold>:
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	605a      	str	r2, [r3, #4]
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <LL_SPI_SetCRCPolynomial>:
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	611a      	str	r2, [r3, #16]
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff ffc0 	bl	80086a2 <LL_SPI_IsEnabled>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d145      	bne.n	80087b4 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008730:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	6811      	ldr	r1, [r2, #0]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	6852      	ldr	r2, [r2, #4]
 800873c:	4311      	orrs	r1, r2
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	68d2      	ldr	r2, [r2, #12]
 8008742:	4311      	orrs	r1, r2
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	6912      	ldr	r2, [r2, #16]
 8008748:	4311      	orrs	r1, r2
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	6952      	ldr	r2, [r2, #20]
 800874e:	4311      	orrs	r1, r2
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	6992      	ldr	r2, [r2, #24]
 8008754:	4311      	orrs	r1, r2
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	69d2      	ldr	r2, [r2, #28]
 800875a:	4311      	orrs	r1, r2
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	6a12      	ldr	r2, [r2, #32]
 8008760:	430a      	orrs	r2, r1
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008770:	f023 0304 	bic.w	r3, r3, #4
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	6891      	ldr	r1, [r2, #8]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	6952      	ldr	r2, [r2, #20]
 800877c:	0c12      	lsrs	r2, r2, #16
 800877e:	430a      	orrs	r2, r1
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800878e:	d204      	bcs.n	800879a <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8008790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff ff97 	bl	80086c8 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087a2:	d105      	bne.n	80087b0 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff ff9f 	bl	80086ee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <__libc_init_array>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4d0d      	ldr	r5, [pc, #52]	; (8008804 <__libc_init_array+0x38>)
 80087d0:	4c0d      	ldr	r4, [pc, #52]	; (8008808 <__libc_init_array+0x3c>)
 80087d2:	1b64      	subs	r4, r4, r5
 80087d4:	10a4      	asrs	r4, r4, #2
 80087d6:	2600      	movs	r6, #0
 80087d8:	42a6      	cmp	r6, r4
 80087da:	d109      	bne.n	80087f0 <__libc_init_array+0x24>
 80087dc:	4d0b      	ldr	r5, [pc, #44]	; (800880c <__libc_init_array+0x40>)
 80087de:	4c0c      	ldr	r4, [pc, #48]	; (8008810 <__libc_init_array+0x44>)
 80087e0:	f000 f820 	bl	8008824 <_init>
 80087e4:	1b64      	subs	r4, r4, r5
 80087e6:	10a4      	asrs	r4, r4, #2
 80087e8:	2600      	movs	r6, #0
 80087ea:	42a6      	cmp	r6, r4
 80087ec:	d105      	bne.n	80087fa <__libc_init_array+0x2e>
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f4:	4798      	blx	r3
 80087f6:	3601      	adds	r6, #1
 80087f8:	e7ee      	b.n	80087d8 <__libc_init_array+0xc>
 80087fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fe:	4798      	blx	r3
 8008800:	3601      	adds	r6, #1
 8008802:	e7f2      	b.n	80087ea <__libc_init_array+0x1e>
 8008804:	0800884c 	.word	0x0800884c
 8008808:	0800884c 	.word	0x0800884c
 800880c:	0800884c 	.word	0x0800884c
 8008810:	08008850 	.word	0x08008850

08008814 <memset>:
 8008814:	4402      	add	r2, r0
 8008816:	4603      	mov	r3, r0
 8008818:	4293      	cmp	r3, r2
 800881a:	d100      	bne.n	800881e <memset+0xa>
 800881c:	4770      	bx	lr
 800881e:	f803 1b01 	strb.w	r1, [r3], #1
 8008822:	e7f9      	b.n	8008818 <memset+0x4>

08008824 <_init>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr

08008830 <_fini>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr
